package testcommon

import (
	"encoding/hex"
	"encoding/json"
	"math/rand"
	"time"

	randomdata "github.com/Pallinder/go-randomdata"

	"gitlab.com/vocdoni/go-dvote/crypto/ethereum"
	// dvote "gitlab.com/vocdoni/go-dvote/util"
	"gitlab.com/vocdoni/manager/manager-backend/types"
	"gitlab.com/vocdoni/manager/manager-backend/util"
)

// CreateEntities a given number of random entities
func CreateEntities(size int) ([]*ethereum.SignKeys, []*types.Entity, error) {
	var entityID, entityAddress []byte
	var err error
	signers := CreateEthRandomKeysBatch(size)
	// var sign string
	// var pk string

	// msg := []byte{123, 34, 109, 101, 109, 98, 101, 114, 115, 73, 110, 102, 111, 34, 58, 91, 123, 34, 100, 97, 116, 101, 79, 102, 66, 105, 114, 116, 104, 34, 58, 34, 50, 48, 49, 52, 45, 49, 49, 45, 49, 54, 84, 50, 48, 58, 48, 48, 58, 48, 51, 43, 48, 49, 58, 48, 48, 34, 44, 34, 101, 109, 97, 105, 108, 34, 58, 34, 97, 110, 116, 104, 111, 110, 121, 116, 104, 111, 109, 97, 115, 52, 51, 49, 64, 101, 120, 97, 109, 112, 108, 101, 46, 110, 101, 116, 34, 44, 34, 102, 105, 114, 115, 116, 78, 97, 109, 101, 34, 58, 34, 77, 105, 99, 104, 97, 101, 108, 34, 44, 34, 108, 97, 115, 116, 78, 97, 109, 101, 34, 58, 34, 83, 109, 105, 116, 104, 34, 44, 34, 112, 104, 111, 110, 101, 34, 58, 34, 43, 50, 49, 49, 32, 54, 55, 56, 32, 55, 32, 51, 56, 32, 54, 55, 57, 32, 55, 56, 34, 44, 34, 115, 116, 114, 101, 101, 116, 65, 100, 100, 114, 101, 115, 115, 34, 58, 34, 50, 55, 32, 70, 114, 97, 110, 107, 108, 105, 110, 32, 80, 108, 44, 92, 110, 66, 117, 114, 114, 116, 111, 110, 44, 32, 87, 73, 44, 32, 49, 50, 52, 49, 54, 34, 44, 34, 99, 111, 110, 115, 101, 110, 116, 101, 100, 34, 58, 116, 114, 117, 101, 44, 34, 118, 101, 114, 105, 102, 105, 101, 100, 34, 58, 34, 50, 48, 51, 53, 45, 48, 55, 45, 48, 52, 84, 50, 48, 58, 48, 50, 58, 51, 48, 43, 48, 50, 58, 48, 48, 34, 44, 34, 99, 117, 115, 116, 111, 109, 70, 105, 101, 108, 100, 115, 34, 58, 110, 117, 108, 108, 125, 44, 123, 34, 100, 97, 116, 101, 79, 102, 66, 105, 114, 116, 104, 34, 58, 34, 50, 48, 49, 50, 45, 48, 50, 45, 48, 50, 84, 48, 50, 58, 50, 56, 58, 50, 56, 43, 48, 49, 58, 48, 48, 34, 44, 34, 101, 109, 97, 105, 108, 34, 58, 34, 109, 97, 100, 105, 115, 111, 110, 116, 104, 111, 109, 97, 115, 55, 56, 48, 64, 101, 120, 97, 109, 112, 108, 101, 46, 111, 114, 103, 34, 44, 34, 102, 105, 114, 115, 116, 78, 97, 109, 101, 34, 58, 34, 66, 101, 110, 106, 97, 109, 105, 110, 34, 44, 34, 108, 97, 115, 116, 78, 97, 109, 101, 34, 58, 34, 74, 111, 110, 101, 115, 34, 44, 34, 112, 104, 111, 110, 101, 34, 58, 34, 43, 51, 56, 57, 32, 54, 50, 52, 32, 48, 32, 55, 55, 32, 56, 53, 55, 55, 54, 34, 44, 34, 115, 116, 114, 101, 101, 116, 65, 100, 100, 114, 101, 115, 115, 34, 58, 34, 55, 57, 32, 87, 105, 108, 115, 111, 110, 32, 65, 118, 101, 44, 92, 110, 76, 117, 99, 105, 101, 110, 44, 32, 84, 88, 44, 32, 51, 48, 52, 49, 49, 34, 44, 34, 99, 111, 110, 115, 101, 110, 116, 101, 100, 34, 58, 102, 97, 108, 115, 101, 44, 34, 118, 101, 114, 105, 102, 105, 101, 100, 34, 58, 34, 50, 48, 50, 57, 45, 48, 54, 45, 49, 51, 84, 49, 52, 58, 48, 56, 58, 50, 56, 43, 48, 50, 58, 48, 48, 34, 44, 34, 99, 117, 115, 116, 111, 109, 70, 105, 101, 108, 100, 115, 34, 58, 110, 117, 108, 108, 125, 44, 123, 34, 100, 97, 116, 101, 79, 102, 66, 105, 114, 116, 104, 34, 58, 34, 50, 48, 51, 52, 45, 49, 48, 45, 48, 50, 84, 48, 55, 58, 52, 57, 58, 48, 51, 43, 48, 50, 58, 48, 48, 34, 44, 34, 101, 109, 97, 105, 108, 34, 58, 34, 99, 104, 108, 111, 101, 116, 104, 111, 109, 112, 115, 111, 110, 54, 51, 53, 64, 116, 101, 115, 116, 46, 110, 101, 116, 34, 44, 34, 102, 105, 114, 115, 116, 78, 97, 109, 101, 34, 58, 34, 73, 115, 97, 98, 101, 108, 108, 97, 34, 44, 34, 108, 97, 115, 116, 78, 97, 109, 101, 34, 58, 34, 72, 97, 114, 114, 105, 115, 34, 44, 34, 112, 104, 111, 110, 101, 34, 58, 34, 43, 54, 55, 48, 32, 56, 49, 48, 32, 56, 49, 57, 51, 50, 52, 32, 52, 32, 55, 34, 44, 34, 115, 116, 114, 101, 101, 116, 65, 100, 100, 114, 101, 115, 115, 34, 58, 34, 49, 51, 32, 74, 101, 102, 102, 101, 114, 115, 111, 110, 32, 66, 108, 118, 100, 44, 92, 110, 66, 97, 108, 100, 111, 99, 107, 44, 32, 86, 65, 44, 32, 51, 51, 48, 51, 51, 34, 44, 34, 99, 111, 110, 115, 101, 110, 116, 101, 100, 34, 58, 116, 114, 117, 101, 44, 34, 118, 101, 114, 105, 102, 105, 101, 100, 34, 58, 34, 50, 48, 51, 52, 45, 49, 48, 45, 50, 48, 84, 48, 56, 58, 48, 53, 58, 50, 49, 43, 48, 50, 58, 48, 48, 34, 44, 34, 99, 117, 115, 116, 111, 109, 70, 105, 101, 108, 100, 115, 34, 58, 110, 117, 108, 108, 125, 93, 44, 34, 109, 101, 116, 104, 111, 100, 34, 58, 34, 105, 109, 112, 111, 114, 116, 77, 101, 109, 98, 101, 114, 115, 34, 44, 34, 116, 97, 114, 103, 101, 116, 73, 100, 34, 58, 34, 34, 44, 34, 116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 58, 49, 53, 57, 50, 53, 55, 50, 53, 55, 54, 125}
	// sign, err = signers[0].SignJSON(msg)
	// if err != nil {
	// 	return nil, nil, err
	// }
	// pk, err = ethereum.PubKeyFromSignature(msg, sign)
	// if err != nil {
	// 	return nil, nil, err
	// }
	// // fmt.Printf("\npubKey util: %v\n", pk)
	// msg = []byte{123, 34, 109, 101, 109, 98, 101, 114, 115, 73, 110, 102, 111, 34, 58, 91, 123, 34, 100, 97, 116, 101, 79, 102, 66, 105, 114, 116, 104, 34, 58, 34, 50, 48, 48, 49, 45, 48, 50, 45, 49, 49, 84, 48, 48, 58, 48, 50, 58, 50, 51, 43, 48, 49, 58, 48, 48, 34, 44, 34, 101, 109, 97, 105, 108, 34, 58, 34, 101, 108, 105, 106, 97, 104, 109, 97, 114, 116, 105, 110, 56, 55, 49, 64, 116, 101, 115, 116, 46, 99, 111, 109, 34, 44, 34, 102, 105, 114, 115, 116, 78, 97, 109, 101, 34, 58, 34, 79, 108, 105, 118, 105, 97, 34, 44, 34, 108, 97, 115, 116, 78, 97, 109, 101, 34, 58, 34, 68, 97, 118, 105, 115, 34, 44, 34, 112, 104, 111, 110, 101, 34, 58, 34, 43, 50, 55, 32, 48, 32, 56, 32, 54, 52, 51, 56, 51, 48, 57, 56, 53, 51, 34, 44, 34, 115, 116, 114, 101, 101, 116, 65, 100, 100, 114, 101, 115, 115, 34, 58, 34, 54, 55, 32, 76, 105, 110, 99, 111, 108, 110, 32, 65, 118, 101, 44, 92, 110, 78, 101, 119, 115, 116, 101, 97, 100, 44, 32, 79, 82, 44, 32, 49, 57, 54, 54, 50, 34, 44, 34, 99, 111, 110, 115, 101, 110, 116, 101, 100, 34, 58, 116, 114, 117, 101, 44, 34, 118, 101, 114, 105, 102, 105, 101, 100, 34, 58, 34, 49, 57, 57, 50, 45, 48, 57, 45, 49, 49, 84, 48, 53, 58, 53, 49, 58, 49, 50, 43, 48, 50, 58, 48, 48, 34, 44, 34, 99, 117, 115, 116, 111, 109, 70, 105, 101, 108, 100, 115, 34, 58, 110, 117, 108, 108, 125, 44, 123, 34, 100, 97, 116, 101, 79, 102, 66, 105, 114, 116, 104, 34, 58, 34, 50, 48, 52, 50, 45, 49, 48, 45, 50, 55, 84, 49, 56, 58, 48, 55, 58, 50, 49, 43, 48, 49, 58, 48, 48, 34, 44, 34, 101, 109, 97, 105, 108, 34, 58, 34, 97, 118, 97, 116, 104, 111, 109, 112, 115, 111, 110, 52, 53, 55, 64, 116, 101, 115, 116, 46, 110, 101, 116, 34, 44, 34, 102, 105, 114, 115, 116, 78, 97, 109, 101, 34, 58, 34, 66, 101, 110, 106, 97, 109, 105, 110, 34, 44, 34, 108, 97, 115, 116, 78, 97, 109, 101, 34, 58, 34, 66, 114, 111, 119, 110, 34, 44, 34, 112, 104, 111, 110, 101, 34, 58, 34, 43, 49, 32, 55, 53, 56, 32, 51, 32, 52, 32, 49, 48, 32, 56, 50, 32, 49, 49, 32, 51, 32, 54, 34, 44, 34, 115, 116, 114, 101, 101, 116, 65, 100, 100, 114, 101, 115, 115, 34, 58, 34, 55, 54, 32, 70, 114, 97, 110, 107, 108, 105, 110, 32, 82, 100, 103, 44, 92, 110, 78, 101, 119, 115, 116, 101, 97, 100, 44, 32, 65, 83, 44, 32, 54, 50, 53, 56, 54, 34, 44, 34, 99, 111, 110, 115, 101, 110, 116, 101, 100, 34, 58, 116, 114, 117, 101, 44, 34, 118, 101, 114, 105, 102, 105, 101, 100, 34, 58, 34, 50, 48, 52, 53, 45, 48, 54, 45, 48, 52, 84, 49, 49, 58, 53, 54, 58, 48, 52, 43, 48, 49, 58, 48, 48, 34, 44, 34, 99, 117, 115, 116, 111, 109, 70, 105, 101, 108, 100, 115, 34, 58, 110, 117, 108, 108, 125, 44, 123, 34, 100, 97, 116, 101, 79, 102, 66, 105, 114, 116, 104, 34, 58, 34, 50, 48, 50, 51, 45, 48, 52, 45, 49, 55, 84, 48, 57, 58, 50, 57, 58, 51, 55, 43, 48, 50, 58, 48, 48, 34, 44, 34, 101, 109, 97, 105, 108, 34, 58, 34, 115, 111, 112, 104, 105, 97, 98, 114, 111, 119, 110, 54, 54, 52, 64, 116, 101, 115, 116, 46, 111, 114, 103, 34, 44, 34, 102, 105, 114, 115, 116, 78, 97, 109, 101, 34, 58, 34, 69, 108, 105, 106, 97, 104, 34, 44, 34, 108, 97, 115, 116, 78, 97, 109, 101, 34, 58, 34, 74, 97, 99, 107, 115, 111, 110, 34, 44, 34, 112, 104, 111, 110, 101, 34, 58, 34, 43, 53, 57, 57, 32, 51, 54, 57, 32, 53, 53, 56, 54, 32, 52, 51, 32, 56, 32, 51, 34, 44, 34, 115, 116, 114, 101, 101, 116, 65, 100, 100, 114, 101, 115, 115, 34, 58, 34, 54, 56, 32, 74, 101, 102, 102, 101, 114, 115, 111, 110, 32, 82, 100, 44, 92, 110, 66, 117, 114, 114, 116, 111, 110, 44, 32, 67, 79, 44, 32, 48, 49, 56, 48, 50, 34, 44, 34, 99, 111, 110, 115, 101, 110, 116, 101, 100, 34, 58, 116, 114, 117, 101, 44, 34, 118, 101, 114, 105, 102, 105, 101, 100, 34, 58, 34, 50, 48, 52, 55, 45, 48, 57, 45, 50, 55, 84, 48, 56, 58, 48, 55, 58, 50, 53, 43, 48, 49, 58, 48, 48, 34, 44, 34, 99, 117, 115, 116, 111, 109, 70, 105, 101, 108, 100, 115, 34, 58, 110, 117, 108, 108, 125, 93, 44, 34, 109, 101, 116, 104, 111, 100, 34, 58, 34, 105, 109, 112, 111, 114, 116, 77, 101, 109, 98, 101, 114, 115, 34, 44, 34, 116, 97, 114, 103, 101, 116, 73, 100, 34, 58, 34, 34, 44, 34, 116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 58, 49, 53, 57, 50, 53, 55, 50, 52, 48, 51, 125}
	// sign, err = signers[0].SignJSON(msg)
	// if err != nil {
	// 	return nil, nil, err
	// }
	// pk, err = ethereum.PubKeyFromSignature(msg, sign)
	// if err != nil {
	// 	return nil, nil, err
	// }
	// // fmt.Printf("\npubKey util: %v\n", pk)
	// // fmt.Printf("Address 1 %s", signers[0].EthAddrString())
	// testAddress, err := util.PubKeyToEntityID(pk)
	// // fmt.Println(hex.EncodeToString(testAddress))
	// testAddress1, err := util.SignerEntityID(*signers[0])
	// fmt.Println(hex.EncodeToString(testAddress1))
	// ethereum.HashRaw(signers[0].EthAddrString())
	mp := make([]*types.Entity, size)
	for i := 0; i < size; i++ {
		// retrieve entity ID
		if entityAddress, err = util.SignerEntityAddress(*signers[i]); err != nil {
			return nil, nil, err
		}
		if entityID, err = util.SignerEntityID(*signers[i]); err != nil {
			return nil, nil, err
		}
		mp[i] = &types.Entity{
			ID: entityID,
			EntityInfo: types.EntityInfo{
				Address:                 entityAddress,
				Email:                   randomdata.Email(),
				Name:                    randomdata.FirstName(2),
				CensusManagersAddresses: [][]byte{{1, 2, 3}},
				Origins:                 []types.Origin{types.Token},
				CallbackURL:             "",
				CallbackSecret:          "",
			},
		}
	}
	return signers, mp, nil
}

// CreateMembers a given number of members with its entityID set to entityID
func CreateMembers(entityID []byte, size int) ([]*ethereum.SignKeys, []*types.Member, error) {
	signers := CreateEthRandomKeysBatch(size)
	members := make([]*types.Member, size)
	// if membersInfo not set generate random data
	for i := 0; i < size; i++ {
		pub, _ := signers[i].HexString()
		pubBytes, err := hex.DecodeString(pub)
		if err != nil {
			return nil, nil, err
		}
		members[i] = &types.Member{
			EntityID: entityID,
			PubKey:   pubBytes,
			MemberInfo: types.MemberInfo{
				DateOfBirth:   RandDate(),
				Email:         randomdata.Email(),
				FirstName:     randomdata.FirstName(2),
				LastName:      randomdata.LastName(),
				Phone:         randomdata.PhoneNumber(),
				StreetAddress: randomdata.Address(),
				Consented:     RandBool(),
				Verified:      RandDate(),
				Origin:        types.Token,
				CustomFields:  json.RawMessage([]byte("{}")),
			},
		}
	}
	return signers, members, nil
}

// CreateEthRandomKeysBatch creates a set of eth random signing keys
func CreateEthRandomKeysBatch(n int) []*ethereum.SignKeys {
	s := make([]*ethereum.SignKeys, n)
	for i := 0; i < n; i++ {
		s[i] = new(ethereum.SignKeys)
		if err := s[i].Generate(); err != nil {
			return nil
		}
	}
	return s
}

// RandDate creates a random date
func RandDate() time.Time {
	min := time.Date(1970, 1, 0, 0, 0, 0, 0, time.UTC).Unix()
	max := time.Date(2070, 1, 0, 0, 0, 0, 0, time.UTC).Unix()
	delta := max - min
	sec := rand.Int63n(delta) + min
	return time.Unix(sec, 0)
}

// RandBool creates a random bool
func RandBool() bool {
	return rand.Float32() < 0.5
}
