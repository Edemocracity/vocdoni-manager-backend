stages:
  - build
  - test
  - release

variables:
  # DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  MANAGER_BUILD_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
  MANAGER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:latest
  NOTIF_BUILD_IMAGE: ${CI_REGISTRY_IMAGE}:notif-${CI_COMMIT_REF_NAME}
  NOTIF_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:notif-latest

  GOPATH: ${CI_PROJECT_DIR}/.cache/gopath # to cache Go module downloads
  GOCACHE: ${CI_PROJECT_DIR}/.cache/gocache # to cache Go build archives
  GOFLAGS: -mod=readonly

cache:
  key: ${CI_JOB_NAME} # separate caches by job, but not by branch
  paths:
    - .cache/

go-test:
  image: golang:1.14.4
  stage: test
  tags:
    - vocdoni
  script:
    # we run vet in another step
    - go test -vet=off -timeout=1m ./...
    # -race can easily make the crypto stuff 10x slower
    - go test -vet=off -timeout=10m -race ./...
  only:
    - merge_requests
    - branches

go-analyze:
  image: golang:1.14.4
  stage: test
  tags:
    - vocdoni
  script:
    - diff -u <(echo -n) <(gofmt -s -d $(git ls-files '*.go'))
    - go vet ./...
    - curl -L https://github.com/dominikh/go-tools/releases/download/2020.1.4/staticcheck_linux_amd64.tar.gz | tar -xzf -
    - ./staticcheck/staticcheck ./...
  only:
    - merge_requests
    - branches

compose-test:
  image: docker/compose:1.27.4
  stage: test
  tags:
    - vocdoni
  script:
    # Avoid compose project collisions in parallel runs
    - export COMPOSE_PROJECT_NAME=${RANDOM}${RANDOM}_manager_test
    - export MANAGER_BUILD_TAG=${CI_COMMIT_SHA::10}
    - export COMPOSE_HOST_PATH=${CI_PROJECT_DIR}/misc/compose-test
    - export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 # faster builds
    - cd misc/compose-test
    - docker-compose build
    - sh start_test.sh
  only:
    - merge_requests
    - master

docker-release:
  image: docker:stable
  services:
    - docker:dind
  stage: release
  tags:
    - vocdoni
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # dvotemanager
    - docker build -t ${MANAGER_BUILD_IMAGE} .
    - docker tag ${MANAGER_BUILD_IMAGE} ${MANAGER_RELEASE_IMAGE}
    - docker push ${MANAGER_BUILD_IMAGE}
    - docker push ${MANAGER_RELEASE_IMAGE}
    # dvotenotif
    - docker build --target dvotenotif -t ${NOTIF_BUILD_IMAGE} .
    - docker tag ${NOTIF_BUILD_IMAGE} ${NOTIF_RELEASE_IMAGE}
    - docker push ${NOTIF_BUILD_IMAGE}
    - docker push ${NOTIF_RELEASE_IMAGE}
  only:
    - master
    - /^release-.*$/
    - stage
