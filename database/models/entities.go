// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Entity is an object representing the database table.
type Entity struct {
	UpdatedAt          time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt          time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ID                 string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	Address            string            `boil:"address" json:"address" toml:"address" yaml:"address"`
	Email              null.String       `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Name               null.String       `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	ManagersPublicKeys types.StringArray `boil:"managers_public_keys" json:"managers_public_keys" toml:"managers_public_keys" yaml:"managers_public_keys"`

	R *entityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L entityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EntityColumns = struct {
	UpdatedAt          string
	CreatedAt          string
	ID                 string
	Address            string
	Email              string
	Name               string
	ManagersPublicKeys string
}{
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
	ID:                 "id",
	Address:            "address",
	Email:              "email",
	Name:               "name",
	ManagersPublicKeys: "managers_public_keys",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var EntityWhere = struct {
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
	ID                 whereHelperstring
	Address            whereHelperstring
	Email              whereHelpernull_String
	Name               whereHelpernull_String
	ManagersPublicKeys whereHelpertypes_StringArray
}{
	UpdatedAt:          whereHelpertime_Time{field: "\"entities\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"entities\".\"created_at\""},
	ID:                 whereHelperstring{field: "\"entities\".\"id\""},
	Address:            whereHelperstring{field: "\"entities\".\"address\""},
	Email:              whereHelpernull_String{field: "\"entities\".\"email\""},
	Name:               whereHelpernull_String{field: "\"entities\".\"name\""},
	ManagersPublicKeys: whereHelpertypes_StringArray{field: "\"entities\".\"managers_public_keys\""},
}

// EntityRels is where relationship names are stored.
var EntityRels = struct {
	Censuses string
	Members  string
	Targets  string
}{
	Censuses: "Censuses",
	Members:  "Members",
	Targets:  "Targets",
}

// entityR is where relationships are stored.
type entityR struct {
	Censuses CensuseSlice `boil:"Censuses" json:"Censuses" toml:"Censuses" yaml:"Censuses"`
	Members  MemberSlice  `boil:"Members" json:"Members" toml:"Members" yaml:"Members"`
	Targets  TargetSlice  `boil:"Targets" json:"Targets" toml:"Targets" yaml:"Targets"`
}

// NewStruct creates a new relationship struct
func (*entityR) NewStruct() *entityR {
	return &entityR{}
}

// entityL is where Load methods for each relationship are stored.
type entityL struct{}

var (
	entityAllColumns            = []string{"updated_at", "created_at", "id", "address", "email", "name", "managers_public_keys"}
	entityColumnsWithoutDefault = []string{"id", "address", "email", "name", "managers_public_keys"}
	entityColumnsWithDefault    = []string{"updated_at", "created_at"}
	entityPrimaryKeyColumns     = []string{"id"}
)

type (
	// EntitySlice is an alias for a slice of pointers to Entity.
	// This should generally be used opposed to []Entity.
	EntitySlice []*Entity
	// EntityHook is the signature for custom Entity hook methods
	EntityHook func(context.Context, boil.ContextExecutor, *Entity) error

	entityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	entityType                 = reflect.TypeOf(&Entity{})
	entityMapping              = queries.MakeStructMapping(entityType)
	entityPrimaryKeyMapping, _ = queries.BindMapping(entityType, entityMapping, entityPrimaryKeyColumns)
	entityInsertCacheMut       sync.RWMutex
	entityInsertCache          = make(map[string]insertCache)
	entityUpdateCacheMut       sync.RWMutex
	entityUpdateCache          = make(map[string]updateCache)
	entityUpsertCacheMut       sync.RWMutex
	entityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var entityBeforeInsertHooks []EntityHook
var entityBeforeUpdateHooks []EntityHook
var entityBeforeDeleteHooks []EntityHook
var entityBeforeUpsertHooks []EntityHook

var entityAfterInsertHooks []EntityHook
var entityAfterSelectHooks []EntityHook
var entityAfterUpdateHooks []EntityHook
var entityAfterDeleteHooks []EntityHook
var entityAfterUpsertHooks []EntityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Entity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Entity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Entity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Entity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Entity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Entity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Entity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Entity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Entity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEntityHook registers your hook function for all future operations.
func AddEntityHook(hookPoint boil.HookPoint, entityHook EntityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		entityBeforeInsertHooks = append(entityBeforeInsertHooks, entityHook)
	case boil.BeforeUpdateHook:
		entityBeforeUpdateHooks = append(entityBeforeUpdateHooks, entityHook)
	case boil.BeforeDeleteHook:
		entityBeforeDeleteHooks = append(entityBeforeDeleteHooks, entityHook)
	case boil.BeforeUpsertHook:
		entityBeforeUpsertHooks = append(entityBeforeUpsertHooks, entityHook)
	case boil.AfterInsertHook:
		entityAfterInsertHooks = append(entityAfterInsertHooks, entityHook)
	case boil.AfterSelectHook:
		entityAfterSelectHooks = append(entityAfterSelectHooks, entityHook)
	case boil.AfterUpdateHook:
		entityAfterUpdateHooks = append(entityAfterUpdateHooks, entityHook)
	case boil.AfterDeleteHook:
		entityAfterDeleteHooks = append(entityAfterDeleteHooks, entityHook)
	case boil.AfterUpsertHook:
		entityAfterUpsertHooks = append(entityAfterUpsertHooks, entityHook)
	}
}

// One returns a single entity record from the query.
func (q entityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Entity, error) {
	o := &Entity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for entities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Entity records from the query.
func (q entityQuery) All(ctx context.Context, exec boil.ContextExecutor) (EntitySlice, error) {
	var o []*Entity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Entity slice")
	}

	if len(entityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Entity records in the query.
func (q entityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count entities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q entityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if entities exists")
	}

	return count > 0, nil
}

// Censuses retrieves all the censuse's Censuses with an executor.
func (o *Entity) Censuses(mods ...qm.QueryMod) censuseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"censuses\".\"entity_id\"=?", o.ID),
	)

	query := Censuses(queryMods...)
	queries.SetFrom(query.Query, "\"censuses\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"censuses\".*"})
	}

	return query
}

// Members retrieves all the member's Members with an executor.
func (o *Entity) Members(mods ...qm.QueryMod) memberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"members\".\"entity_id\"=?", o.ID),
	)

	query := Members(queryMods...)
	queries.SetFrom(query.Query, "\"members\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"members\".*"})
	}

	return query
}

// Targets retrieves all the target's Targets with an executor.
func (o *Entity) Targets(mods ...qm.QueryMod) targetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"targets\".\"entity_id\"=?", o.ID),
	)

	query := Targets(queryMods...)
	queries.SetFrom(query.Query, "\"targets\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"targets\".*"})
	}

	return query
}

// LoadCensuses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (entityL) LoadCensuses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEntity interface{}, mods queries.Applicator) error {
	var slice []*Entity
	var object *Entity

	if singular {
		object = maybeEntity.(*Entity)
	} else {
		slice = *maybeEntity.(*[]*Entity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &entityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &entityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`censuses`),
		qm.WhereIn(`censuses.entity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load censuses")
	}

	var resultSlice []*Censuse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice censuses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on censuses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for censuses")
	}

	if len(censuseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Censuses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &censuseR{}
			}
			foreign.R.Entity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EntityID {
				local.R.Censuses = append(local.R.Censuses, foreign)
				if foreign.R == nil {
					foreign.R = &censuseR{}
				}
				foreign.R.Entity = local
				break
			}
		}
	}

	return nil
}

// LoadMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (entityL) LoadMembers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEntity interface{}, mods queries.Applicator) error {
	var slice []*Entity
	var object *Entity

	if singular {
		object = maybeEntity.(*Entity)
	} else {
		slice = *maybeEntity.(*[]*Entity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &entityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &entityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`members`),
		qm.WhereIn(`members.entity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load members")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for members")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Members = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &memberR{}
			}
			foreign.R.Entity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EntityID) {
				local.R.Members = append(local.R.Members, foreign)
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.Entity = local
				break
			}
		}
	}

	return nil
}

// LoadTargets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (entityL) LoadTargets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEntity interface{}, mods queries.Applicator) error {
	var slice []*Entity
	var object *Entity

	if singular {
		object = maybeEntity.(*Entity)
	} else {
		slice = *maybeEntity.(*[]*Entity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &entityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &entityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`targets`),
		qm.WhereIn(`targets.entity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load targets")
	}

	var resultSlice []*Target
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice targets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on targets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for targets")
	}

	if len(targetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Targets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &targetR{}
			}
			foreign.R.Entity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EntityID {
				local.R.Targets = append(local.R.Targets, foreign)
				if foreign.R == nil {
					foreign.R = &targetR{}
				}
				foreign.R.Entity = local
				break
			}
		}
	}

	return nil
}

// AddCensuses adds the given related objects to the existing relationships
// of the entity, optionally inserting them as new records.
// Appends related to o.R.Censuses.
// Sets related.R.Entity appropriately.
func (o *Entity) AddCensuses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Censuse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EntityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"censuses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"entity_id"}),
				strmangle.WhereClause("\"", "\"", 2, censusePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EntityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &entityR{
			Censuses: related,
		}
	} else {
		o.R.Censuses = append(o.R.Censuses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &censuseR{
				Entity: o,
			}
		} else {
			rel.R.Entity = o
		}
	}
	return nil
}

// AddMembers adds the given related objects to the existing relationships
// of the entity, optionally inserting them as new records.
// Appends related to o.R.Members.
// Sets related.R.Entity appropriately.
func (o *Entity) AddMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Member) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EntityID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"members\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"entity_id"}),
				strmangle.WhereClause("\"", "\"", 2, memberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EntityID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &entityR{
			Members: related,
		}
	} else {
		o.R.Members = append(o.R.Members, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &memberR{
				Entity: o,
			}
		} else {
			rel.R.Entity = o
		}
	}
	return nil
}

// SetMembers removes all previously related items of the
// entity replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Entity's Members accordingly.
// Replaces o.R.Members with related.
// Sets related.R.Entity's Members accordingly.
func (o *Entity) SetMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Member) error {
	query := "update \"members\" set \"entity_id\" = null where \"entity_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Members {
			queries.SetScanner(&rel.EntityID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Entity = nil
		}

		o.R.Members = nil
	}
	return o.AddMembers(ctx, exec, insert, related...)
}

// RemoveMembers relationships from objects passed in.
// Removes related items from R.Members (uses pointer comparison, removal does not keep order)
// Sets related.R.Entity.
func (o *Entity) RemoveMembers(ctx context.Context, exec boil.ContextExecutor, related ...*Member) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EntityID, nil)
		if rel.R != nil {
			rel.R.Entity = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("entity_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Members {
			if rel != ri {
				continue
			}

			ln := len(o.R.Members)
			if ln > 1 && i < ln-1 {
				o.R.Members[i] = o.R.Members[ln-1]
			}
			o.R.Members = o.R.Members[:ln-1]
			break
		}
	}

	return nil
}

// AddTargets adds the given related objects to the existing relationships
// of the entity, optionally inserting them as new records.
// Appends related to o.R.Targets.
// Sets related.R.Entity appropriately.
func (o *Entity) AddTargets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Target) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EntityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"targets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"entity_id"}),
				strmangle.WhereClause("\"", "\"", 2, targetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EntityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &entityR{
			Targets: related,
		}
	} else {
		o.R.Targets = append(o.R.Targets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &targetR{
				Entity: o,
			}
		} else {
			rel.R.Entity = o
		}
	}
	return nil
}

// Entities retrieves all the records using an executor.
func Entities(mods ...qm.QueryMod) entityQuery {
	mods = append(mods, qm.From("\"entities\""))
	return entityQuery{NewQuery(mods...)}
}

// FindEntity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEntity(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Entity, error) {
	entityObj := &Entity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"entities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, entityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from entities")
	}

	return entityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Entity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no entities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(entityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	entityInsertCacheMut.RLock()
	cache, cached := entityInsertCache[key]
	entityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			entityAllColumns,
			entityColumnsWithDefault,
			entityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(entityType, entityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(entityType, entityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"entities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"entities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into entities")
	}

	if !cached {
		entityInsertCacheMut.Lock()
		entityInsertCache[key] = cache
		entityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Entity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Entity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	entityUpdateCacheMut.RLock()
	cache, cached := entityUpdateCache[key]
	entityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			entityAllColumns,
			entityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update entities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"entities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, entityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(entityType, entityMapping, append(wl, entityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update entities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for entities")
	}

	if !cached {
		entityUpdateCacheMut.Lock()
		entityUpdateCache[key] = cache
		entityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q entityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for entities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EntitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"entities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, entityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in entity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all entity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Entity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no entities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(entityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	entityUpsertCacheMut.RLock()
	cache, cached := entityUpsertCache[key]
	entityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			entityAllColumns,
			entityColumnsWithDefault,
			entityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			entityAllColumns,
			entityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert entities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(entityPrimaryKeyColumns))
			copy(conflict, entityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"entities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(entityType, entityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(entityType, entityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert entities")
	}

	if !cached {
		entityUpsertCacheMut.Lock()
		entityUpsertCache[key] = cache
		entityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Entity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Entity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Entity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), entityPrimaryKeyMapping)
	sql := "DELETE FROM \"entities\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for entities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q entityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no entityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for entities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EntitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(entityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"entities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, entityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from entity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for entities")
	}

	if len(entityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Entity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEntity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EntitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EntitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"entities\".* FROM \"entities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, entityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EntitySlice")
	}

	*o = slice

	return nil
}

// EntityExists checks if the Entity row exists.
func EntityExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"entities\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if entities exists")
	}

	return exists, nil
}
