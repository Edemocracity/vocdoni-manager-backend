// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Censuses", testCensuses)
	t.Run("Entities", testEntities)
	t.Run("Members", testMembers)
	t.Run("PushTokens", testPushTokens)
	t.Run("Targets", testTargets)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Censuses", testCensusesDelete)
	t.Run("Entities", testEntitiesDelete)
	t.Run("Members", testMembersDelete)
	t.Run("PushTokens", testPushTokensDelete)
	t.Run("Targets", testTargetsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Censuses", testCensusesQueryDeleteAll)
	t.Run("Entities", testEntitiesQueryDeleteAll)
	t.Run("Members", testMembersQueryDeleteAll)
	t.Run("PushTokens", testPushTokensQueryDeleteAll)
	t.Run("Targets", testTargetsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Censuses", testCensusesSliceDeleteAll)
	t.Run("Entities", testEntitiesSliceDeleteAll)
	t.Run("Members", testMembersSliceDeleteAll)
	t.Run("PushTokens", testPushTokensSliceDeleteAll)
	t.Run("Targets", testTargetsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Censuses", testCensusesExists)
	t.Run("Entities", testEntitiesExists)
	t.Run("Members", testMembersExists)
	t.Run("PushTokens", testPushTokensExists)
	t.Run("Targets", testTargetsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Censuses", testCensusesFind)
	t.Run("Entities", testEntitiesFind)
	t.Run("Members", testMembersFind)
	t.Run("PushTokens", testPushTokensFind)
	t.Run("Targets", testTargetsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Censuses", testCensusesBind)
	t.Run("Entities", testEntitiesBind)
	t.Run("Members", testMembersBind)
	t.Run("PushTokens", testPushTokensBind)
	t.Run("Targets", testTargetsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Censuses", testCensusesOne)
	t.Run("Entities", testEntitiesOne)
	t.Run("Members", testMembersOne)
	t.Run("PushTokens", testPushTokensOne)
	t.Run("Targets", testTargetsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Censuses", testCensusesAll)
	t.Run("Entities", testEntitiesAll)
	t.Run("Members", testMembersAll)
	t.Run("PushTokens", testPushTokensAll)
	t.Run("Targets", testTargetsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Censuses", testCensusesCount)
	t.Run("Entities", testEntitiesCount)
	t.Run("Members", testMembersCount)
	t.Run("PushTokens", testPushTokensCount)
	t.Run("Targets", testTargetsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Censuses", testCensusesHooks)
	t.Run("Entities", testEntitiesHooks)
	t.Run("Members", testMembersHooks)
	t.Run("PushTokens", testPushTokensHooks)
	t.Run("Targets", testTargetsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Censuses", testCensusesInsert)
	t.Run("Censuses", testCensusesInsertWhitelist)
	t.Run("Entities", testEntitiesInsert)
	t.Run("Entities", testEntitiesInsertWhitelist)
	t.Run("Members", testMembersInsert)
	t.Run("Members", testMembersInsertWhitelist)
	t.Run("PushTokens", testPushTokensInsert)
	t.Run("PushTokens", testPushTokensInsertWhitelist)
	t.Run("Targets", testTargetsInsert)
	t.Run("Targets", testTargetsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CensuseToEntityUsingEntity", testCensuseToOneEntityUsingEntity)
	t.Run("CensuseToTargetUsingTarget", testCensuseToOneTargetUsingTarget)
	t.Run("MemberToEntityUsingEntity", testMemberToOneEntityUsingEntity)
	t.Run("MemberToUserUsingSubscribed", testMemberToOneUserUsingSubscribed)
	t.Run("PushTokenToUserUsingUser", testPushTokenToOneUserUsingUser)
	t.Run("TargetToEntityUsingEntity", testTargetToOneEntityUsingEntity)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CensuseToMembers", testCensuseToManyMembers)
	t.Run("EntityToCensuses", testEntityToManyCensuses)
	t.Run("EntityToMembers", testEntityToManyMembers)
	t.Run("EntityToTargets", testEntityToManyTargets)
	t.Run("MemberToCensusCensuses", testMemberToManyCensusCensuses)
	t.Run("TargetToCensuses", testTargetToManyCensuses)
	t.Run("UserToSubscribedUsers", testUserToManySubscribedUsers)
	t.Run("UserToPushTokens", testUserToManyPushTokens)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CensuseToEntityUsingCensuses", testCensuseToOneSetOpEntityUsingEntity)
	t.Run("CensuseToTargetUsingCensuses", testCensuseToOneSetOpTargetUsingTarget)
	t.Run("MemberToEntityUsingMembers", testMemberToOneSetOpEntityUsingEntity)
	t.Run("MemberToUserUsingSubscribedUsers", testMemberToOneSetOpUserUsingSubscribed)
	t.Run("PushTokenToUserUsingPushTokens", testPushTokenToOneSetOpUserUsingUser)
	t.Run("TargetToEntityUsingTargets", testTargetToOneSetOpEntityUsingEntity)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("MemberToEntityUsingMembers", testMemberToOneRemoveOpEntityUsingEntity)
	t.Run("MemberToUserUsingSubscribedUsers", testMemberToOneRemoveOpUserUsingSubscribed)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CensuseToMembers", testCensuseToManyAddOpMembers)
	t.Run("EntityToCensuses", testEntityToManyAddOpCensuses)
	t.Run("EntityToMembers", testEntityToManyAddOpMembers)
	t.Run("EntityToTargets", testEntityToManyAddOpTargets)
	t.Run("MemberToCensusCensuses", testMemberToManyAddOpCensusCensuses)
	t.Run("TargetToCensuses", testTargetToManyAddOpCensuses)
	t.Run("UserToSubscribedUsers", testUserToManyAddOpSubscribedUsers)
	t.Run("UserToPushTokens", testUserToManyAddOpPushTokens)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CensuseToMembers", testCensuseToManySetOpMembers)
	t.Run("EntityToMembers", testEntityToManySetOpMembers)
	t.Run("MemberToCensusCensuses", testMemberToManySetOpCensusCensuses)
	t.Run("UserToSubscribedUsers", testUserToManySetOpSubscribedUsers)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CensuseToMembers", testCensuseToManyRemoveOpMembers)
	t.Run("EntityToMembers", testEntityToManyRemoveOpMembers)
	t.Run("MemberToCensusCensuses", testMemberToManyRemoveOpCensusCensuses)
	t.Run("UserToSubscribedUsers", testUserToManyRemoveOpSubscribedUsers)
}

func TestReload(t *testing.T) {
	t.Run("Censuses", testCensusesReload)
	t.Run("Entities", testEntitiesReload)
	t.Run("Members", testMembersReload)
	t.Run("PushTokens", testPushTokensReload)
	t.Run("Targets", testTargetsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Censuses", testCensusesReloadAll)
	t.Run("Entities", testEntitiesReloadAll)
	t.Run("Members", testMembersReloadAll)
	t.Run("PushTokens", testPushTokensReloadAll)
	t.Run("Targets", testTargetsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Censuses", testCensusesSelect)
	t.Run("Entities", testEntitiesSelect)
	t.Run("Members", testMembersSelect)
	t.Run("PushTokens", testPushTokensSelect)
	t.Run("Targets", testTargetsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Censuses", testCensusesUpdate)
	t.Run("Entities", testEntitiesUpdate)
	t.Run("Members", testMembersUpdate)
	t.Run("PushTokens", testPushTokensUpdate)
	t.Run("Targets", testTargetsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Censuses", testCensusesSliceUpdateAll)
	t.Run("Entities", testEntitiesSliceUpdateAll)
	t.Run("Members", testMembersSliceUpdateAll)
	t.Run("PushTokens", testPushTokensSliceUpdateAll)
	t.Run("Targets", testTargetsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
