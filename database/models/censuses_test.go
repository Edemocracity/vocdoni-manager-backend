// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCensuses(t *testing.T) {
	t.Parallel()

	query := Censuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCensusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCensusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Censuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCensusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CensuseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCensusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CensuseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Censuse exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CensuseExists to return true, but got false.")
	}
}

func testCensusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	censuseFound, err := FindCensuse(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if censuseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCensusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Censuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCensusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Censuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCensusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	censuseOne := &Censuse{}
	censuseTwo := &Censuse{}
	if err = randomize.Struct(seed, censuseOne, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}
	if err = randomize.Struct(seed, censuseTwo, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = censuseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = censuseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Censuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCensusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	censuseOne := &Censuse{}
	censuseTwo := &Censuse{}
	if err = randomize.Struct(seed, censuseOne, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}
	if err = randomize.Struct(seed, censuseTwo, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = censuseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = censuseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func censuseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func censuseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func censuseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func censuseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func censuseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func censuseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func censuseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func censuseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func censuseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Censuse) error {
	*o = Censuse{}
	return nil
}

func testCensusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Censuse{}
	o := &Censuse{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, censuseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Censuse object: %s", err)
	}

	AddCensuseHook(boil.BeforeInsertHook, censuseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	censuseBeforeInsertHooks = []CensuseHook{}

	AddCensuseHook(boil.AfterInsertHook, censuseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	censuseAfterInsertHooks = []CensuseHook{}

	AddCensuseHook(boil.AfterSelectHook, censuseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	censuseAfterSelectHooks = []CensuseHook{}

	AddCensuseHook(boil.BeforeUpdateHook, censuseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	censuseBeforeUpdateHooks = []CensuseHook{}

	AddCensuseHook(boil.AfterUpdateHook, censuseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	censuseAfterUpdateHooks = []CensuseHook{}

	AddCensuseHook(boil.BeforeDeleteHook, censuseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	censuseBeforeDeleteHooks = []CensuseHook{}

	AddCensuseHook(boil.AfterDeleteHook, censuseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	censuseAfterDeleteHooks = []CensuseHook{}

	AddCensuseHook(boil.BeforeUpsertHook, censuseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	censuseBeforeUpsertHooks = []CensuseHook{}

	AddCensuseHook(boil.AfterUpsertHook, censuseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	censuseAfterUpsertHooks = []CensuseHook{}
}

func testCensusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCensusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(censuseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCensuseToManyMembers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Censuse
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"census_members\" (\"census_id\", \"member_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"census_members\" (\"census_id\", \"member_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Members().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CensuseSlice{&a}
	if err = a.L.LoadMembers(ctx, tx, false, (*[]*Censuse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Members); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Members = nil
	if err = a.L.LoadMembers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Members); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCensuseToManyAddOpMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Censuse
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, censuseDBTypes, false, strmangle.SetComplement(censusePrimaryKeyColumns, censuseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Member{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMembers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.CensusCensuses[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.CensusCensuses[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Members[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Members[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Members().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCensuseToManySetOpMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Censuse
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, censuseDBTypes, false, strmangle.SetComplement(censusePrimaryKeyColumns, censuseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMembers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Members().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMembers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Members().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.CensusCensuses) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.CensusCensuses) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.CensusCensuses[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.CensusCensuses[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Members[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Members[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCensuseToManyRemoveOpMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Censuse
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, censuseDBTypes, false, strmangle.SetComplement(censusePrimaryKeyColumns, censuseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMembers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Members().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMembers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Members().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.CensusCensuses) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.CensusCensuses) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.CensusCensuses[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CensusCensuses[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Members) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Members[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Members[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCensuseToOneEntityUsingEntity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Censuse
	var foreign Entity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, entityDBTypes, false, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EntityID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Entity().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CensuseSlice{&local}
	if err = local.L.LoadEntity(ctx, tx, false, (*[]*Censuse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Entity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Entity = nil
	if err = local.L.LoadEntity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Entity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCensuseToOneTargetUsingTarget(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Censuse
	var foreign Target

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, targetDBTypes, false, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TargetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Target().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CensuseSlice{&local}
	if err = local.L.LoadTarget(ctx, tx, false, (*[]*Censuse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Target == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Target = nil
	if err = local.L.LoadTarget(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Target == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCensuseToOneSetOpEntityUsingEntity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Censuse
	var b, c Entity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, censuseDBTypes, false, strmangle.SetComplement(censusePrimaryKeyColumns, censuseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Entity{&b, &c} {
		err = a.SetEntity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Entity != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Censuses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EntityID != x.ID {
			t.Error("foreign key was wrong value", a.EntityID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EntityID))
		reflect.Indirect(reflect.ValueOf(&a.EntityID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EntityID != x.ID {
			t.Error("foreign key was wrong value", a.EntityID, x.ID)
		}
	}
}
func testCensuseToOneSetOpTargetUsingTarget(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Censuse
	var b, c Target

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, censuseDBTypes, false, strmangle.SetComplement(censusePrimaryKeyColumns, censuseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, targetDBTypes, false, strmangle.SetComplement(targetPrimaryKeyColumns, targetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, targetDBTypes, false, strmangle.SetComplement(targetPrimaryKeyColumns, targetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Target{&b, &c} {
		err = a.SetTarget(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Target != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Censuses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TargetID != x.ID {
			t.Error("foreign key was wrong value", a.TargetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TargetID))
		reflect.Indirect(reflect.ValueOf(&a.TargetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TargetID != x.ID {
			t.Error("foreign key was wrong value", a.TargetID, x.ID)
		}
	}
}

func testCensusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCensusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CensuseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCensusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Censuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	censuseDBTypes = map[string]string{`UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `TargetID`: `integer`, `ID`: `text`, `Name`: `text`, `EntityID`: `text`, `MerkleRoot`: `text`, `MerkleTreeURI`: `text`}
	_              = bytes.MinRead
)

func testCensusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(censusePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(censuseAllColumns) == len(censusePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, censuseDBTypes, true, censusePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCensusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(censuseAllColumns) == len(censusePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Censuse{}
	if err = randomize.Struct(seed, o, censuseDBTypes, true, censuseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, censuseDBTypes, true, censusePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(censuseAllColumns, censusePrimaryKeyColumns) {
		fields = censuseAllColumns
	} else {
		fields = strmangle.SetComplement(
			censuseAllColumns,
			censusePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CensuseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCensusesUpsert(t *testing.T) {
	t.Parallel()

	if len(censuseAllColumns) == len(censusePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Censuse{}
	if err = randomize.Struct(seed, &o, censuseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Censuse: %s", err)
	}

	count, err := Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, censuseDBTypes, false, censusePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Censuse struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Censuse: %s", err)
	}

	count, err = Censuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
