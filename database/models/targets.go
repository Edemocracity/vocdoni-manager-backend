// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Target is an object representing the database table.
type Target struct {
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ID        int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	EntityID  string     `boil:"entity_id" json:"entity_id" toml:"entity_id" yaml:"entity_id"`
	Name      string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Filters   types.JSON `boil:"filters" json:"filters" toml:"filters" yaml:"filters"`

	R *targetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L targetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TargetColumns = struct {
	UpdatedAt string
	CreatedAt string
	ID        string
	EntityID  string
	Name      string
	Filters   string
}{
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
	ID:        "id",
	EntityID:  "entity_id",
	Name:      "name",
	Filters:   "filters",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TargetWhere = struct {
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
	ID        whereHelperint
	EntityID  whereHelperstring
	Name      whereHelperstring
	Filters   whereHelpertypes_JSON
}{
	UpdatedAt: whereHelpertime_Time{field: "\"targets\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"targets\".\"created_at\""},
	ID:        whereHelperint{field: "\"targets\".\"id\""},
	EntityID:  whereHelperstring{field: "\"targets\".\"entity_id\""},
	Name:      whereHelperstring{field: "\"targets\".\"name\""},
	Filters:   whereHelpertypes_JSON{field: "\"targets\".\"filters\""},
}

// TargetRels is where relationship names are stored.
var TargetRels = struct {
	Entity   string
	Censuses string
}{
	Entity:   "Entity",
	Censuses: "Censuses",
}

// targetR is where relationships are stored.
type targetR struct {
	Entity   *Entity      `boil:"Entity" json:"Entity" toml:"Entity" yaml:"Entity"`
	Censuses CensuseSlice `boil:"Censuses" json:"Censuses" toml:"Censuses" yaml:"Censuses"`
}

// NewStruct creates a new relationship struct
func (*targetR) NewStruct() *targetR {
	return &targetR{}
}

// targetL is where Load methods for each relationship are stored.
type targetL struct{}

var (
	targetAllColumns            = []string{"updated_at", "created_at", "id", "entity_id", "name", "filters"}
	targetColumnsWithoutDefault = []string{"entity_id", "name", "filters"}
	targetColumnsWithDefault    = []string{"updated_at", "created_at", "id"}
	targetPrimaryKeyColumns     = []string{"id"}
)

type (
	// TargetSlice is an alias for a slice of pointers to Target.
	// This should generally be used opposed to []Target.
	TargetSlice []*Target
	// TargetHook is the signature for custom Target hook methods
	TargetHook func(context.Context, boil.ContextExecutor, *Target) error

	targetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	targetType                 = reflect.TypeOf(&Target{})
	targetMapping              = queries.MakeStructMapping(targetType)
	targetPrimaryKeyMapping, _ = queries.BindMapping(targetType, targetMapping, targetPrimaryKeyColumns)
	targetInsertCacheMut       sync.RWMutex
	targetInsertCache          = make(map[string]insertCache)
	targetUpdateCacheMut       sync.RWMutex
	targetUpdateCache          = make(map[string]updateCache)
	targetUpsertCacheMut       sync.RWMutex
	targetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var targetBeforeInsertHooks []TargetHook
var targetBeforeUpdateHooks []TargetHook
var targetBeforeDeleteHooks []TargetHook
var targetBeforeUpsertHooks []TargetHook

var targetAfterInsertHooks []TargetHook
var targetAfterSelectHooks []TargetHook
var targetAfterUpdateHooks []TargetHook
var targetAfterDeleteHooks []TargetHook
var targetAfterUpsertHooks []TargetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Target) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Target) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Target) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Target) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Target) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Target) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Target) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Target) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Target) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTargetHook registers your hook function for all future operations.
func AddTargetHook(hookPoint boil.HookPoint, targetHook TargetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		targetBeforeInsertHooks = append(targetBeforeInsertHooks, targetHook)
	case boil.BeforeUpdateHook:
		targetBeforeUpdateHooks = append(targetBeforeUpdateHooks, targetHook)
	case boil.BeforeDeleteHook:
		targetBeforeDeleteHooks = append(targetBeforeDeleteHooks, targetHook)
	case boil.BeforeUpsertHook:
		targetBeforeUpsertHooks = append(targetBeforeUpsertHooks, targetHook)
	case boil.AfterInsertHook:
		targetAfterInsertHooks = append(targetAfterInsertHooks, targetHook)
	case boil.AfterSelectHook:
		targetAfterSelectHooks = append(targetAfterSelectHooks, targetHook)
	case boil.AfterUpdateHook:
		targetAfterUpdateHooks = append(targetAfterUpdateHooks, targetHook)
	case boil.AfterDeleteHook:
		targetAfterDeleteHooks = append(targetAfterDeleteHooks, targetHook)
	case boil.AfterUpsertHook:
		targetAfterUpsertHooks = append(targetAfterUpsertHooks, targetHook)
	}
}

// One returns a single target record from the query.
func (q targetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Target, error) {
	o := &Target{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for targets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Target records from the query.
func (q targetQuery) All(ctx context.Context, exec boil.ContextExecutor) (TargetSlice, error) {
	var o []*Target

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Target slice")
	}

	if len(targetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Target records in the query.
func (q targetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count targets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q targetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if targets exists")
	}

	return count > 0, nil
}

// Entity pointed to by the foreign key.
func (o *Target) Entity(mods ...qm.QueryMod) entityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EntityID),
	}

	queryMods = append(queryMods, mods...)

	query := Entities(queryMods...)
	queries.SetFrom(query.Query, "\"entities\"")

	return query
}

// Censuses retrieves all the censuse's Censuses with an executor.
func (o *Target) Censuses(mods ...qm.QueryMod) censuseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"censuses\".\"target_id\"=?", o.ID),
	)

	query := Censuses(queryMods...)
	queries.SetFrom(query.Query, "\"censuses\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"censuses\".*"})
	}

	return query
}

// LoadEntity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (targetL) LoadEntity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTarget interface{}, mods queries.Applicator) error {
	var slice []*Target
	var object *Target

	if singular {
		object = maybeTarget.(*Target)
	} else {
		slice = *maybeTarget.(*[]*Target)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetR{}
		}
		args = append(args, object.EntityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetR{}
			}

			for _, a := range args {
				if a == obj.EntityID {
					continue Outer
				}
			}

			args = append(args, obj.EntityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`entities`),
		qm.WhereIn(`entities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Entity")
	}

	var resultSlice []*Entity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Entity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for entities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entities")
	}

	if len(targetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Entity = foreign
		if foreign.R == nil {
			foreign.R = &entityR{}
		}
		foreign.R.Targets = append(foreign.R.Targets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EntityID == foreign.ID {
				local.R.Entity = foreign
				if foreign.R == nil {
					foreign.R = &entityR{}
				}
				foreign.R.Targets = append(foreign.R.Targets, local)
				break
			}
		}
	}

	return nil
}

// LoadCensuses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetL) LoadCensuses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTarget interface{}, mods queries.Applicator) error {
	var slice []*Target
	var object *Target

	if singular {
		object = maybeTarget.(*Target)
	} else {
		slice = *maybeTarget.(*[]*Target)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`censuses`),
		qm.WhereIn(`censuses.target_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load censuses")
	}

	var resultSlice []*Censuse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice censuses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on censuses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for censuses")
	}

	if len(censuseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Censuses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &censuseR{}
			}
			foreign.R.Target = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TargetID {
				local.R.Censuses = append(local.R.Censuses, foreign)
				if foreign.R == nil {
					foreign.R = &censuseR{}
				}
				foreign.R.Target = local
				break
			}
		}
	}

	return nil
}

// SetEntity of the target to the related item.
// Sets o.R.Entity to related.
// Adds o to related.R.Targets.
func (o *Target) SetEntity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Entity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"targets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"entity_id"}),
		strmangle.WhereClause("\"", "\"", 2, targetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EntityID = related.ID
	if o.R == nil {
		o.R = &targetR{
			Entity: related,
		}
	} else {
		o.R.Entity = related
	}

	if related.R == nil {
		related.R = &entityR{
			Targets: TargetSlice{o},
		}
	} else {
		related.R.Targets = append(related.R.Targets, o)
	}

	return nil
}

// AddCensuses adds the given related objects to the existing relationships
// of the target, optionally inserting them as new records.
// Appends related to o.R.Censuses.
// Sets related.R.Target appropriately.
func (o *Target) AddCensuses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Censuse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TargetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"censuses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"target_id"}),
				strmangle.WhereClause("\"", "\"", 2, censusePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TargetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &targetR{
			Censuses: related,
		}
	} else {
		o.R.Censuses = append(o.R.Censuses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &censuseR{
				Target: o,
			}
		} else {
			rel.R.Target = o
		}
	}
	return nil
}

// Targets retrieves all the records using an executor.
func Targets(mods ...qm.QueryMod) targetQuery {
	mods = append(mods, qm.From("\"targets\""))
	return targetQuery{NewQuery(mods...)}
}

// FindTarget retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTarget(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Target, error) {
	targetObj := &Target{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"targets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, targetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from targets")
	}

	return targetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Target) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no targets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	targetInsertCacheMut.RLock()
	cache, cached := targetInsertCache[key]
	targetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			targetAllColumns,
			targetColumnsWithDefault,
			targetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(targetType, targetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(targetType, targetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"targets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"targets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into targets")
	}

	if !cached {
		targetInsertCacheMut.Lock()
		targetInsertCache[key] = cache
		targetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Target.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Target) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	targetUpdateCacheMut.RLock()
	cache, cached := targetUpdateCache[key]
	targetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			targetAllColumns,
			targetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update targets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"targets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, targetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(targetType, targetMapping, append(wl, targetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update targets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for targets")
	}

	if !cached {
		targetUpdateCacheMut.Lock()
		targetUpdateCache[key] = cache
		targetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q targetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for targets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for targets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TargetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"targets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, targetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in target slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all target")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Target) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no targets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	targetUpsertCacheMut.RLock()
	cache, cached := targetUpsertCache[key]
	targetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			targetAllColumns,
			targetColumnsWithDefault,
			targetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			targetAllColumns,
			targetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert targets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(targetPrimaryKeyColumns))
			copy(conflict, targetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"targets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(targetType, targetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(targetType, targetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert targets")
	}

	if !cached {
		targetUpsertCacheMut.Lock()
		targetUpsertCache[key] = cache
		targetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Target record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Target) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Target provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), targetPrimaryKeyMapping)
	sql := "DELETE FROM \"targets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from targets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for targets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q targetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no targetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from targets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for targets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TargetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(targetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"targets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, targetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from target slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for targets")
	}

	if len(targetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Target) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTarget(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TargetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TargetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"targets\".* FROM \"targets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, targetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TargetSlice")
	}

	*o = slice

	return nil
}

// TargetExists checks if the Target row exists.
func TargetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"targets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if targets exists")
	}

	return exists, nil
}
