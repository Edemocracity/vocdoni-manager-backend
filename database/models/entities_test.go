// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEntities(t *testing.T) {
	t.Parallel()

	query := Entities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEntitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEntitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Entities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEntitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EntitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEntitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EntityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Entity exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EntityExists to return true, but got false.")
	}
}

func testEntitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	entityFound, err := FindEntity(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if entityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEntitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Entities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEntitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Entities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEntitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	entityOne := &Entity{}
	entityTwo := &Entity{}
	if err = randomize.Struct(seed, entityOne, entityDBTypes, false, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}
	if err = randomize.Struct(seed, entityTwo, entityDBTypes, false, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = entityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = entityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Entities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEntitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	entityOne := &Entity{}
	entityTwo := &Entity{}
	if err = randomize.Struct(seed, entityOne, entityDBTypes, false, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}
	if err = randomize.Struct(seed, entityTwo, entityDBTypes, false, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = entityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = entityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func entityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func entityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func entityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func entityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func entityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func entityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func entityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func entityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func entityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Entity) error {
	*o = Entity{}
	return nil
}

func testEntitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Entity{}
	o := &Entity{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, entityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Entity object: %s", err)
	}

	AddEntityHook(boil.BeforeInsertHook, entityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	entityBeforeInsertHooks = []EntityHook{}

	AddEntityHook(boil.AfterInsertHook, entityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	entityAfterInsertHooks = []EntityHook{}

	AddEntityHook(boil.AfterSelectHook, entityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	entityAfterSelectHooks = []EntityHook{}

	AddEntityHook(boil.BeforeUpdateHook, entityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	entityBeforeUpdateHooks = []EntityHook{}

	AddEntityHook(boil.AfterUpdateHook, entityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	entityAfterUpdateHooks = []EntityHook{}

	AddEntityHook(boil.BeforeDeleteHook, entityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	entityBeforeDeleteHooks = []EntityHook{}

	AddEntityHook(boil.AfterDeleteHook, entityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	entityAfterDeleteHooks = []EntityHook{}

	AddEntityHook(boil.BeforeUpsertHook, entityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	entityBeforeUpsertHooks = []EntityHook{}

	AddEntityHook(boil.AfterUpsertHook, entityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	entityAfterUpsertHooks = []EntityHook{}
}

func testEntitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEntitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(entityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEntityToManyCensuses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entity
	var b, c Censuse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EntityID = a.ID
	c.EntityID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Censuses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.EntityID == b.EntityID {
			bFound = true
		}
		if v.EntityID == c.EntityID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EntitySlice{&a}
	if err = a.L.LoadCensuses(ctx, tx, false, (*[]*Entity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Censuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Censuses = nil
	if err = a.L.LoadCensuses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Censuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEntityToManyMembers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entity
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.EntityID, a.ID)
	queries.Assign(&c.EntityID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Members().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.EntityID, b.EntityID) {
			bFound = true
		}
		if queries.Equal(v.EntityID, c.EntityID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EntitySlice{&a}
	if err = a.L.LoadMembers(ctx, tx, false, (*[]*Entity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Members); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Members = nil
	if err = a.L.LoadMembers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Members); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEntityToManyTargets(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entity
	var b, c Target

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, targetDBTypes, false, targetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, targetDBTypes, false, targetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EntityID = a.ID
	c.EntityID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Targets().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.EntityID == b.EntityID {
			bFound = true
		}
		if v.EntityID == c.EntityID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EntitySlice{&a}
	if err = a.L.LoadTargets(ctx, tx, false, (*[]*Entity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Targets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Targets = nil
	if err = a.L.LoadTargets(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Targets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEntityToManyAddOpCensuses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entity
	var b, c, d, e Censuse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Censuse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, censuseDBTypes, false, strmangle.SetComplement(censusePrimaryKeyColumns, censuseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Censuse{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCensuses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EntityID {
			t.Error("foreign key was wrong value", a.ID, first.EntityID)
		}
		if a.ID != second.EntityID {
			t.Error("foreign key was wrong value", a.ID, second.EntityID)
		}

		if first.R.Entity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Entity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Censuses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Censuses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Censuses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEntityToManyAddOpMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entity
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Member{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMembers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.EntityID) {
			t.Error("foreign key was wrong value", a.ID, first.EntityID)
		}
		if !queries.Equal(a.ID, second.EntityID) {
			t.Error("foreign key was wrong value", a.ID, second.EntityID)
		}

		if first.R.Entity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Entity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Members[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Members[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Members().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testEntityToManySetOpMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entity
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMembers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Members().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMembers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Members().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.EntityID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.EntityID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.EntityID) {
		t.Error("foreign key was wrong value", a.ID, d.EntityID)
	}
	if !queries.Equal(a.ID, e.EntityID) {
		t.Error("foreign key was wrong value", a.ID, e.EntityID)
	}

	if b.R.Entity != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Entity != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Entity != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Entity != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Members[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Members[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testEntityToManyRemoveOpMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entity
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMembers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Members().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMembers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Members().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.EntityID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.EntityID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Entity != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Entity != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Entity != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Entity != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Members) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Members[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Members[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testEntityToManyAddOpTargets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Entity
	var b, c, d, e Target

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Target{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, targetDBTypes, false, strmangle.SetComplement(targetPrimaryKeyColumns, targetColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Target{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTargets(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EntityID {
			t.Error("foreign key was wrong value", a.ID, first.EntityID)
		}
		if a.ID != second.EntityID {
			t.Error("foreign key was wrong value", a.ID, second.EntityID)
		}

		if first.R.Entity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Entity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Targets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Targets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Targets().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testEntitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEntitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EntitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEntitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Entities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	entityDBTypes = map[string]string{`UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `ID`: `text`, `Address`: `text`, `Email`: `text`, `Name`: `text`, `ManagersPublicKeys`: `ARRAYtext`}
	_             = bytes.MinRead
)

func testEntitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(entityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(entityAllColumns) == len(entityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, entityDBTypes, true, entityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEntitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(entityAllColumns) == len(entityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Entity{}
	if err = randomize.Struct(seed, o, entityDBTypes, true, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, entityDBTypes, true, entityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(entityAllColumns, entityPrimaryKeyColumns) {
		fields = entityAllColumns
	} else {
		fields = strmangle.SetComplement(
			entityAllColumns,
			entityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EntitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEntitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(entityAllColumns) == len(entityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Entity{}
	if err = randomize.Struct(seed, &o, entityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Entity: %s", err)
	}

	count, err := Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, entityDBTypes, false, entityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Entity: %s", err)
	}

	count, err = Entities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
