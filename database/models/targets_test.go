// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTargets(t *testing.T) {
	t.Parallel()

	query := Targets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTargetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTargetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Targets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTargetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TargetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTargetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TargetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Target exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TargetExists to return true, but got false.")
	}
}

func testTargetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	targetFound, err := FindTarget(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if targetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTargetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Targets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTargetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Targets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTargetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	targetOne := &Target{}
	targetTwo := &Target{}
	if err = randomize.Struct(seed, targetOne, targetDBTypes, false, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}
	if err = randomize.Struct(seed, targetTwo, targetDBTypes, false, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = targetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = targetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Targets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTargetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	targetOne := &Target{}
	targetTwo := &Target{}
	if err = randomize.Struct(seed, targetOne, targetDBTypes, false, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}
	if err = randomize.Struct(seed, targetTwo, targetDBTypes, false, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = targetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = targetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func targetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func targetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func targetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func targetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func targetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func targetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func targetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func targetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func targetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Target) error {
	*o = Target{}
	return nil
}

func testTargetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Target{}
	o := &Target{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, targetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Target object: %s", err)
	}

	AddTargetHook(boil.BeforeInsertHook, targetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	targetBeforeInsertHooks = []TargetHook{}

	AddTargetHook(boil.AfterInsertHook, targetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	targetAfterInsertHooks = []TargetHook{}

	AddTargetHook(boil.AfterSelectHook, targetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	targetAfterSelectHooks = []TargetHook{}

	AddTargetHook(boil.BeforeUpdateHook, targetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	targetBeforeUpdateHooks = []TargetHook{}

	AddTargetHook(boil.AfterUpdateHook, targetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	targetAfterUpdateHooks = []TargetHook{}

	AddTargetHook(boil.BeforeDeleteHook, targetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	targetBeforeDeleteHooks = []TargetHook{}

	AddTargetHook(boil.AfterDeleteHook, targetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	targetAfterDeleteHooks = []TargetHook{}

	AddTargetHook(boil.BeforeUpsertHook, targetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	targetBeforeUpsertHooks = []TargetHook{}

	AddTargetHook(boil.AfterUpsertHook, targetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	targetAfterUpsertHooks = []TargetHook{}
}

func testTargetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTargetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(targetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTargetToManyCensuses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Target
	var b, c Censuse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, censuseDBTypes, false, censuseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TargetID = a.ID
	c.TargetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Censuses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TargetID == b.TargetID {
			bFound = true
		}
		if v.TargetID == c.TargetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TargetSlice{&a}
	if err = a.L.LoadCensuses(ctx, tx, false, (*[]*Target)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Censuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Censuses = nil
	if err = a.L.LoadCensuses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Censuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTargetToManyAddOpCensuses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Target
	var b, c, d, e Censuse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, targetDBTypes, false, strmangle.SetComplement(targetPrimaryKeyColumns, targetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Censuse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, censuseDBTypes, false, strmangle.SetComplement(censusePrimaryKeyColumns, censuseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Censuse{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCensuses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TargetID {
			t.Error("foreign key was wrong value", a.ID, first.TargetID)
		}
		if a.ID != second.TargetID {
			t.Error("foreign key was wrong value", a.ID, second.TargetID)
		}

		if first.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Censuses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Censuses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Censuses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTargetToOneEntityUsingEntity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Target
	var foreign Entity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, targetDBTypes, false, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, entityDBTypes, false, entityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Entity struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EntityID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Entity().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TargetSlice{&local}
	if err = local.L.LoadEntity(ctx, tx, false, (*[]*Target)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Entity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Entity = nil
	if err = local.L.LoadEntity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Entity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTargetToOneSetOpEntityUsingEntity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Target
	var b, c Entity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, targetDBTypes, false, strmangle.SetComplement(targetPrimaryKeyColumns, targetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, entityDBTypes, false, strmangle.SetComplement(entityPrimaryKeyColumns, entityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Entity{&b, &c} {
		err = a.SetEntity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Entity != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Targets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EntityID != x.ID {
			t.Error("foreign key was wrong value", a.EntityID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EntityID))
		reflect.Indirect(reflect.ValueOf(&a.EntityID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EntityID != x.ID {
			t.Error("foreign key was wrong value", a.EntityID, x.ID)
		}
	}
}

func testTargetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTargetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TargetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTargetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Targets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	targetDBTypes = map[string]string{`UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `ID`: `integer`, `EntityID`: `text`, `Name`: `text`, `Filters`: `jsonb`}
	_             = bytes.MinRead
)

func testTargetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(targetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(targetAllColumns) == len(targetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, targetDBTypes, true, targetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTargetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(targetAllColumns) == len(targetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Target{}
	if err = randomize.Struct(seed, o, targetDBTypes, true, targetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, targetDBTypes, true, targetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(targetAllColumns, targetPrimaryKeyColumns) {
		fields = targetAllColumns
	} else {
		fields = strmangle.SetComplement(
			targetAllColumns,
			targetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TargetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTargetsUpsert(t *testing.T) {
	t.Parallel()

	if len(targetAllColumns) == len(targetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Target{}
	if err = randomize.Struct(seed, &o, targetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Target: %s", err)
	}

	count, err := Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, targetDBTypes, false, targetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Target struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Target: %s", err)
	}

	count, err = Targets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
