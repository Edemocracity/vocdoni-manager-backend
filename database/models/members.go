// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Member is an object representing the database table.
type Member struct {
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EntityID      null.String `boil:"entity_id" json:"entity_id,omitempty" toml:"entity_id" yaml:"entity_id,omitempty"`
	PublicKey     null.String `boil:"public_key" json:"public_key,omitempty" toml:"public_key" yaml:"public_key,omitempty"`
	StreetAddress null.String `boil:"street_address" json:"street_address,omitempty" toml:"street_address" yaml:"street_address,omitempty"`
	FirstName     null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName      null.String `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	Email         null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Phone         null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	DateOfBirth   null.Time   `boil:"date_of_birth" json:"date_of_birth,omitempty" toml:"date_of_birth" yaml:"date_of_birth,omitempty"`
	Origin        null.String `boil:"origin" json:"origin,omitempty" toml:"origin" yaml:"origin,omitempty"`
	Consented     bool        `boil:"consented" json:"consented" toml:"consented" yaml:"consented"`
	Verified      null.Time   `boil:"verified" json:"verified,omitempty" toml:"verified" yaml:"verified,omitempty"`

	R *memberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberColumns = struct {
	UpdatedAt     string
	CreatedAt     string
	ID            string
	EntityID      string
	PublicKey     string
	StreetAddress string
	FirstName     string
	LastName      string
	Email         string
	Phone         string
	DateOfBirth   string
	Origin        string
	Consented     string
	Verified      string
}{
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
	ID:            "id",
	EntityID:      "entity_id",
	PublicKey:     "public_key",
	StreetAddress: "street_address",
	FirstName:     "first_name",
	LastName:      "last_name",
	Email:         "email",
	Phone:         "phone",
	DateOfBirth:   "date_of_birth",
	Origin:        "origin",
	Consented:     "consented",
	Verified:      "verified",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var MemberWhere = struct {
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
	ID            whereHelperstring
	EntityID      whereHelpernull_String
	PublicKey     whereHelpernull_String
	StreetAddress whereHelpernull_String
	FirstName     whereHelpernull_String
	LastName      whereHelpernull_String
	Email         whereHelpernull_String
	Phone         whereHelpernull_String
	DateOfBirth   whereHelpernull_Time
	Origin        whereHelpernull_String
	Consented     whereHelperbool
	Verified      whereHelpernull_Time
}{
	UpdatedAt:     whereHelpertime_Time{field: "\"members\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"members\".\"created_at\""},
	ID:            whereHelperstring{field: "\"members\".\"id\""},
	EntityID:      whereHelpernull_String{field: "\"members\".\"entity_id\""},
	PublicKey:     whereHelpernull_String{field: "\"members\".\"public_key\""},
	StreetAddress: whereHelpernull_String{field: "\"members\".\"street_address\""},
	FirstName:     whereHelpernull_String{field: "\"members\".\"first_name\""},
	LastName:      whereHelpernull_String{field: "\"members\".\"last_name\""},
	Email:         whereHelpernull_String{field: "\"members\".\"email\""},
	Phone:         whereHelpernull_String{field: "\"members\".\"phone\""},
	DateOfBirth:   whereHelpernull_Time{field: "\"members\".\"date_of_birth\""},
	Origin:        whereHelpernull_String{field: "\"members\".\"origin\""},
	Consented:     whereHelperbool{field: "\"members\".\"consented\""},
	Verified:      whereHelpernull_Time{field: "\"members\".\"verified\""},
}

// MemberRels is where relationship names are stored.
var MemberRels = struct {
	Entity         string
	Subscribed     string
	CensusCensuses string
}{
	Entity:         "Entity",
	Subscribed:     "Subscribed",
	CensusCensuses: "CensusCensuses",
}

// memberR is where relationships are stored.
type memberR struct {
	Entity         *Entity      `boil:"Entity" json:"Entity" toml:"Entity" yaml:"Entity"`
	Subscribed     *User        `boil:"Subscribed" json:"Subscribed" toml:"Subscribed" yaml:"Subscribed"`
	CensusCensuses CensuseSlice `boil:"CensusCensuses" json:"CensusCensuses" toml:"CensusCensuses" yaml:"CensusCensuses"`
}

// NewStruct creates a new relationship struct
func (*memberR) NewStruct() *memberR {
	return &memberR{}
}

// memberL is where Load methods for each relationship are stored.
type memberL struct{}

var (
	memberAllColumns            = []string{"updated_at", "created_at", "id", "entity_id", "public_key", "street_address", "first_name", "last_name", "email", "phone", "date_of_birth", "origin", "consented", "verified"}
	memberColumnsWithoutDefault = []string{"entity_id", "public_key", "street_address", "first_name", "last_name", "email", "phone", "date_of_birth", "origin", "verified"}
	memberColumnsWithDefault    = []string{"updated_at", "created_at", "id", "consented"}
	memberPrimaryKeyColumns     = []string{"id"}
)

type (
	// MemberSlice is an alias for a slice of pointers to Member.
	// This should generally be used opposed to []Member.
	MemberSlice []*Member
	// MemberHook is the signature for custom Member hook methods
	MemberHook func(context.Context, boil.ContextExecutor, *Member) error

	memberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberType                 = reflect.TypeOf(&Member{})
	memberMapping              = queries.MakeStructMapping(memberType)
	memberPrimaryKeyMapping, _ = queries.BindMapping(memberType, memberMapping, memberPrimaryKeyColumns)
	memberInsertCacheMut       sync.RWMutex
	memberInsertCache          = make(map[string]insertCache)
	memberUpdateCacheMut       sync.RWMutex
	memberUpdateCache          = make(map[string]updateCache)
	memberUpsertCacheMut       sync.RWMutex
	memberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memberBeforeInsertHooks []MemberHook
var memberBeforeUpdateHooks []MemberHook
var memberBeforeDeleteHooks []MemberHook
var memberBeforeUpsertHooks []MemberHook

var memberAfterInsertHooks []MemberHook
var memberAfterSelectHooks []MemberHook
var memberAfterUpdateHooks []MemberHook
var memberAfterDeleteHooks []MemberHook
var memberAfterUpsertHooks []MemberHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Member) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Member) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Member) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Member) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Member) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Member) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Member) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Member) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Member) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemberHook registers your hook function for all future operations.
func AddMemberHook(hookPoint boil.HookPoint, memberHook MemberHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		memberBeforeInsertHooks = append(memberBeforeInsertHooks, memberHook)
	case boil.BeforeUpdateHook:
		memberBeforeUpdateHooks = append(memberBeforeUpdateHooks, memberHook)
	case boil.BeforeDeleteHook:
		memberBeforeDeleteHooks = append(memberBeforeDeleteHooks, memberHook)
	case boil.BeforeUpsertHook:
		memberBeforeUpsertHooks = append(memberBeforeUpsertHooks, memberHook)
	case boil.AfterInsertHook:
		memberAfterInsertHooks = append(memberAfterInsertHooks, memberHook)
	case boil.AfterSelectHook:
		memberAfterSelectHooks = append(memberAfterSelectHooks, memberHook)
	case boil.AfterUpdateHook:
		memberAfterUpdateHooks = append(memberAfterUpdateHooks, memberHook)
	case boil.AfterDeleteHook:
		memberAfterDeleteHooks = append(memberAfterDeleteHooks, memberHook)
	case boil.AfterUpsertHook:
		memberAfterUpsertHooks = append(memberAfterUpsertHooks, memberHook)
	}
}

// One returns a single member record from the query.
func (q memberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Member, error) {
	o := &Member{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for members")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Member records from the query.
func (q memberQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemberSlice, error) {
	var o []*Member

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Member slice")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Member records in the query.
func (q memberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count members rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q memberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if members exists")
	}

	return count > 0, nil
}

// Entity pointed to by the foreign key.
func (o *Member) Entity(mods ...qm.QueryMod) entityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EntityID),
	}

	queryMods = append(queryMods, mods...)

	query := Entities(queryMods...)
	queries.SetFrom(query.Query, "\"entities\"")

	return query
}

// Subscribed pointed to by the foreign key.
func (o *Member) Subscribed(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"public_key\" = ?", o.PublicKey),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// CensusCensuses retrieves all the censuse's Censuses with an executor via id column.
func (o *Member) CensusCensuses(mods ...qm.QueryMod) censuseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"census_members\" on \"censuses\".\"id\" = \"census_members\".\"census_id\""),
		qm.Where("\"census_members\".\"member_id\"=?", o.ID),
	)

	query := Censuses(queryMods...)
	queries.SetFrom(query.Query, "\"censuses\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"censuses\".*"})
	}

	return query
}

// LoadEntity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (memberL) LoadEntity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		object = maybeMember.(*Member)
	} else {
		slice = *maybeMember.(*[]*Member)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		if !queries.IsNil(object.EntityID) {
			args = append(args, object.EntityID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EntityID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EntityID) {
				args = append(args, obj.EntityID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`entities`),
		qm.WhereIn(`entities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Entity")
	}

	var resultSlice []*Entity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Entity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for entities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entities")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Entity = foreign
		if foreign.R == nil {
			foreign.R = &entityR{}
		}
		foreign.R.Members = append(foreign.R.Members, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EntityID, foreign.ID) {
				local.R.Entity = foreign
				if foreign.R == nil {
					foreign.R = &entityR{}
				}
				foreign.R.Members = append(foreign.R.Members, local)
				break
			}
		}
	}

	return nil
}

// LoadSubscribed allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (memberL) LoadSubscribed(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		object = maybeMember.(*Member)
	} else {
		slice = *maybeMember.(*[]*Member)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		if !queries.IsNil(object.PublicKey) {
			args = append(args, object.PublicKey)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PublicKey) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PublicKey) {
				args = append(args, obj.PublicKey)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.public_key in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subscribed = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SubscribedUsers = append(foreign.R.SubscribedUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PublicKey, foreign.PublicKey) {
				local.R.Subscribed = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SubscribedUsers = append(foreign.R.SubscribedUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadCensusCensuses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadCensusCensuses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		object = maybeMember.(*Member)
	} else {
		slice = *maybeMember.(*[]*Member)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"censuses\".*, \"a\".\"member_id\""),
		qm.From("\"censuses\""),
		qm.InnerJoin("\"census_members\" as \"a\" on \"censuses\".\"id\" = \"a\".\"census_id\""),
		qm.WhereIn("\"a\".\"member_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load censuses")
	}

	var resultSlice []*Censuse

	var localJoinCols []string
	for results.Next() {
		one := new(Censuse)
		var localJoinCol string

		err = results.Scan(&one.UpdatedAt, &one.CreatedAt, &one.TargetID, &one.ID, &one.Name, &one.EntityID, &one.MerkleRoot, &one.MerkleTreeURI, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for censuses")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice censuses")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on censuses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for censuses")
	}

	if len(censuseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CensusCensuses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &censuseR{}
			}
			foreign.R.Members = append(foreign.R.Members, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.CensusCensuses = append(local.R.CensusCensuses, foreign)
				if foreign.R == nil {
					foreign.R = &censuseR{}
				}
				foreign.R.Members = append(foreign.R.Members, local)
				break
			}
		}
	}

	return nil
}

// SetEntity of the member to the related item.
// Sets o.R.Entity to related.
// Adds o to related.R.Members.
func (o *Member) SetEntity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Entity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"entity_id"}),
		strmangle.WhereClause("\"", "\"", 2, memberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EntityID, related.ID)
	if o.R == nil {
		o.R = &memberR{
			Entity: related,
		}
	} else {
		o.R.Entity = related
	}

	if related.R == nil {
		related.R = &entityR{
			Members: MemberSlice{o},
		}
	} else {
		related.R.Members = append(related.R.Members, o)
	}

	return nil
}

// RemoveEntity relationship.
// Sets o.R.Entity to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Member) RemoveEntity(ctx context.Context, exec boil.ContextExecutor, related *Entity) error {
	var err error

	queries.SetScanner(&o.EntityID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("entity_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Entity = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Members {
		if queries.Equal(o.EntityID, ri.EntityID) {
			continue
		}

		ln := len(related.R.Members)
		if ln > 1 && i < ln-1 {
			related.R.Members[i] = related.R.Members[ln-1]
		}
		related.R.Members = related.R.Members[:ln-1]
		break
	}
	return nil
}

// SetSubscribed of the member to the related item.
// Sets o.R.Subscribed to related.
// Adds o to related.R.SubscribedUsers.
func (o *Member) SetSubscribed(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"public_key"}),
		strmangle.WhereClause("\"", "\"", 2, memberPrimaryKeyColumns),
	)
	values := []interface{}{related.PublicKey, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PublicKey, related.PublicKey)
	if o.R == nil {
		o.R = &memberR{
			Subscribed: related,
		}
	} else {
		o.R.Subscribed = related
	}

	if related.R == nil {
		related.R = &userR{
			SubscribedUsers: MemberSlice{o},
		}
	} else {
		related.R.SubscribedUsers = append(related.R.SubscribedUsers, o)
	}

	return nil
}

// RemoveSubscribed relationship.
// Sets o.R.Subscribed to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Member) RemoveSubscribed(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.PublicKey, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("public_key")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Subscribed = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SubscribedUsers {
		if queries.Equal(o.PublicKey, ri.PublicKey) {
			continue
		}

		ln := len(related.R.SubscribedUsers)
		if ln > 1 && i < ln-1 {
			related.R.SubscribedUsers[i] = related.R.SubscribedUsers[ln-1]
		}
		related.R.SubscribedUsers = related.R.SubscribedUsers[:ln-1]
		break
	}
	return nil
}

// AddCensusCensuses adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.CensusCensuses.
// Sets related.R.Members appropriately.
func (o *Member) AddCensusCensuses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Censuse) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"census_members\" (\"member_id\", \"census_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &memberR{
			CensusCensuses: related,
		}
	} else {
		o.R.CensusCensuses = append(o.R.CensusCensuses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &censuseR{
				Members: MemberSlice{o},
			}
		} else {
			rel.R.Members = append(rel.R.Members, o)
		}
	}
	return nil
}

// SetCensusCensuses removes all previously related items of the
// member replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Members's CensusCensuses accordingly.
// Replaces o.R.CensusCensuses with related.
// Sets related.R.Members's CensusCensuses accordingly.
func (o *Member) SetCensusCensuses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Censuse) error {
	query := "delete from \"census_members\" where \"member_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCensusCensusesFromMembersSlice(o, related)
	if o.R != nil {
		o.R.CensusCensuses = nil
	}
	return o.AddCensusCensuses(ctx, exec, insert, related...)
}

// RemoveCensusCensuses relationships from objects passed in.
// Removes related items from R.CensusCensuses (uses pointer comparison, removal does not keep order)
// Sets related.R.Members.
func (o *Member) RemoveCensusCensuses(ctx context.Context, exec boil.ContextExecutor, related ...*Censuse) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"census_members\" where \"member_id\" = $1 and \"census_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCensusCensusesFromMembersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CensusCensuses {
			if rel != ri {
				continue
			}

			ln := len(o.R.CensusCensuses)
			if ln > 1 && i < ln-1 {
				o.R.CensusCensuses[i] = o.R.CensusCensuses[ln-1]
			}
			o.R.CensusCensuses = o.R.CensusCensuses[:ln-1]
			break
		}
	}

	return nil
}

func removeCensusCensusesFromMembersSlice(o *Member, related []*Censuse) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Members {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Members)
			if ln > 1 && i < ln-1 {
				rel.R.Members[i] = rel.R.Members[ln-1]
			}
			rel.R.Members = rel.R.Members[:ln-1]
			break
		}
	}
}

// Members retrieves all the records using an executor.
func Members(mods ...qm.QueryMod) memberQuery {
	mods = append(mods, qm.From("\"members\""))
	return memberQuery{NewQuery(mods...)}
}

// FindMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMember(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Member, error) {
	memberObj := &Member{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"members\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, memberObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from members")
	}

	return memberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Member) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no members provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberInsertCacheMut.RLock()
	cache, cached := memberInsertCache[key]
	memberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberAllColumns,
			memberColumnsWithDefault,
			memberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberType, memberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"members\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"members\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into members")
	}

	if !cached {
		memberInsertCacheMut.Lock()
		memberInsertCache[key] = cache
		memberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Member.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Member) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memberUpdateCacheMut.RLock()
	cache, cached := memberUpdateCache[key]
	memberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"members\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, memberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, append(wl, memberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for members")
	}

	if !cached {
		memberUpdateCacheMut.Lock()
		memberUpdateCache[key] = cache
		memberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q memberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for members")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, memberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in member slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all member")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Member) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no members provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberUpsertCacheMut.RLock()
	cache, cached := memberUpsertCache[key]
	memberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			memberAllColumns,
			memberColumnsWithDefault,
			memberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert members, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(memberPrimaryKeyColumns))
			copy(conflict, memberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"members\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberType, memberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert members")
	}

	if !cached {
		memberUpsertCacheMut.Lock()
		memberUpsertCache[key] = cache
		memberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Member record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Member) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Member provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberPrimaryKeyMapping)
	sql := "DELETE FROM \"members\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for members")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q memberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for members")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, memberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for members")
	}

	if len(memberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Member) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMember(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"members\".* FROM \"members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, memberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemberSlice")
	}

	*o = slice

	return nil
}

// MemberExists checks if the Member row exists.
func MemberExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"members\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if members exists")
	}

	return exists, nil
}
