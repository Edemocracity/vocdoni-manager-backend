// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Censuse is an object representing the database table.
type Censuse struct {
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	TargetID      int         `boil:"target_id" json:"target_id" toml:"target_id" yaml:"target_id"`
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name          string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	EntityID      string      `boil:"entity_id" json:"entity_id" toml:"entity_id" yaml:"entity_id"`
	MerkleRoot    null.String `boil:"merkle_root" json:"merkle_root,omitempty" toml:"merkle_root" yaml:"merkle_root,omitempty"`
	MerkleTreeURI null.String `boil:"merkle_tree_uri" json:"merkle_tree_uri,omitempty" toml:"merkle_tree_uri" yaml:"merkle_tree_uri,omitempty"`

	R *censuseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L censuseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CensuseColumns = struct {
	UpdatedAt     string
	CreatedAt     string
	TargetID      string
	ID            string
	Name          string
	EntityID      string
	MerkleRoot    string
	MerkleTreeURI string
}{
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
	TargetID:      "target_id",
	ID:            "id",
	Name:          "name",
	EntityID:      "entity_id",
	MerkleRoot:    "merkle_root",
	MerkleTreeURI: "merkle_tree_uri",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CensuseWhere = struct {
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
	TargetID      whereHelperint
	ID            whereHelperstring
	Name          whereHelperstring
	EntityID      whereHelperstring
	MerkleRoot    whereHelpernull_String
	MerkleTreeURI whereHelpernull_String
}{
	UpdatedAt:     whereHelpertime_Time{field: "\"censuses\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"censuses\".\"created_at\""},
	TargetID:      whereHelperint{field: "\"censuses\".\"target_id\""},
	ID:            whereHelperstring{field: "\"censuses\".\"id\""},
	Name:          whereHelperstring{field: "\"censuses\".\"name\""},
	EntityID:      whereHelperstring{field: "\"censuses\".\"entity_id\""},
	MerkleRoot:    whereHelpernull_String{field: "\"censuses\".\"merkle_root\""},
	MerkleTreeURI: whereHelpernull_String{field: "\"censuses\".\"merkle_tree_uri\""},
}

// CensuseRels is where relationship names are stored.
var CensuseRels = struct {
	Entity  string
	Target  string
	Members string
}{
	Entity:  "Entity",
	Target:  "Target",
	Members: "Members",
}

// censuseR is where relationships are stored.
type censuseR struct {
	Entity  *Entity     `boil:"Entity" json:"Entity" toml:"Entity" yaml:"Entity"`
	Target  *Target     `boil:"Target" json:"Target" toml:"Target" yaml:"Target"`
	Members MemberSlice `boil:"Members" json:"Members" toml:"Members" yaml:"Members"`
}

// NewStruct creates a new relationship struct
func (*censuseR) NewStruct() *censuseR {
	return &censuseR{}
}

// censuseL is where Load methods for each relationship are stored.
type censuseL struct{}

var (
	censuseAllColumns            = []string{"updated_at", "created_at", "target_id", "id", "name", "entity_id", "merkle_root", "merkle_tree_uri"}
	censuseColumnsWithoutDefault = []string{"target_id", "id", "name", "entity_id", "merkle_root", "merkle_tree_uri"}
	censuseColumnsWithDefault    = []string{"updated_at", "created_at"}
	censusePrimaryKeyColumns     = []string{"id"}
)

type (
	// CensuseSlice is an alias for a slice of pointers to Censuse.
	// This should generally be used opposed to []Censuse.
	CensuseSlice []*Censuse
	// CensuseHook is the signature for custom Censuse hook methods
	CensuseHook func(context.Context, boil.ContextExecutor, *Censuse) error

	censuseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	censuseType                 = reflect.TypeOf(&Censuse{})
	censuseMapping              = queries.MakeStructMapping(censuseType)
	censusePrimaryKeyMapping, _ = queries.BindMapping(censuseType, censuseMapping, censusePrimaryKeyColumns)
	censuseInsertCacheMut       sync.RWMutex
	censuseInsertCache          = make(map[string]insertCache)
	censuseUpdateCacheMut       sync.RWMutex
	censuseUpdateCache          = make(map[string]updateCache)
	censuseUpsertCacheMut       sync.RWMutex
	censuseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var censuseBeforeInsertHooks []CensuseHook
var censuseBeforeUpdateHooks []CensuseHook
var censuseBeforeDeleteHooks []CensuseHook
var censuseBeforeUpsertHooks []CensuseHook

var censuseAfterInsertHooks []CensuseHook
var censuseAfterSelectHooks []CensuseHook
var censuseAfterUpdateHooks []CensuseHook
var censuseAfterDeleteHooks []CensuseHook
var censuseAfterUpsertHooks []CensuseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Censuse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Censuse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Censuse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Censuse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Censuse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Censuse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Censuse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Censuse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Censuse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range censuseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCensuseHook registers your hook function for all future operations.
func AddCensuseHook(hookPoint boil.HookPoint, censuseHook CensuseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		censuseBeforeInsertHooks = append(censuseBeforeInsertHooks, censuseHook)
	case boil.BeforeUpdateHook:
		censuseBeforeUpdateHooks = append(censuseBeforeUpdateHooks, censuseHook)
	case boil.BeforeDeleteHook:
		censuseBeforeDeleteHooks = append(censuseBeforeDeleteHooks, censuseHook)
	case boil.BeforeUpsertHook:
		censuseBeforeUpsertHooks = append(censuseBeforeUpsertHooks, censuseHook)
	case boil.AfterInsertHook:
		censuseAfterInsertHooks = append(censuseAfterInsertHooks, censuseHook)
	case boil.AfterSelectHook:
		censuseAfterSelectHooks = append(censuseAfterSelectHooks, censuseHook)
	case boil.AfterUpdateHook:
		censuseAfterUpdateHooks = append(censuseAfterUpdateHooks, censuseHook)
	case boil.AfterDeleteHook:
		censuseAfterDeleteHooks = append(censuseAfterDeleteHooks, censuseHook)
	case boil.AfterUpsertHook:
		censuseAfterUpsertHooks = append(censuseAfterUpsertHooks, censuseHook)
	}
}

// One returns a single censuse record from the query.
func (q censuseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Censuse, error) {
	o := &Censuse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for censuses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Censuse records from the query.
func (q censuseQuery) All(ctx context.Context, exec boil.ContextExecutor) (CensuseSlice, error) {
	var o []*Censuse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Censuse slice")
	}

	if len(censuseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Censuse records in the query.
func (q censuseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count censuses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q censuseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if censuses exists")
	}

	return count > 0, nil
}

// Entity pointed to by the foreign key.
func (o *Censuse) Entity(mods ...qm.QueryMod) entityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EntityID),
	}

	queryMods = append(queryMods, mods...)

	query := Entities(queryMods...)
	queries.SetFrom(query.Query, "\"entities\"")

	return query
}

// Target pointed to by the foreign key.
func (o *Censuse) Target(mods ...qm.QueryMod) targetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TargetID),
	}

	queryMods = append(queryMods, mods...)

	query := Targets(queryMods...)
	queries.SetFrom(query.Query, "\"targets\"")

	return query
}

// Members retrieves all the member's Members with an executor.
func (o *Censuse) Members(mods ...qm.QueryMod) memberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"census_members\" on \"members\".\"id\" = \"census_members\".\"member_id\""),
		qm.Where("\"census_members\".\"census_id\"=?", o.ID),
	)

	query := Members(queryMods...)
	queries.SetFrom(query.Query, "\"members\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"members\".*"})
	}

	return query
}

// LoadEntity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (censuseL) LoadEntity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCensuse interface{}, mods queries.Applicator) error {
	var slice []*Censuse
	var object *Censuse

	if singular {
		object = maybeCensuse.(*Censuse)
	} else {
		slice = *maybeCensuse.(*[]*Censuse)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &censuseR{}
		}
		args = append(args, object.EntityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &censuseR{}
			}

			for _, a := range args {
				if a == obj.EntityID {
					continue Outer
				}
			}

			args = append(args, obj.EntityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`entities`),
		qm.WhereIn(`entities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Entity")
	}

	var resultSlice []*Entity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Entity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for entities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entities")
	}

	if len(censuseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Entity = foreign
		if foreign.R == nil {
			foreign.R = &entityR{}
		}
		foreign.R.Censuses = append(foreign.R.Censuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EntityID == foreign.ID {
				local.R.Entity = foreign
				if foreign.R == nil {
					foreign.R = &entityR{}
				}
				foreign.R.Censuses = append(foreign.R.Censuses, local)
				break
			}
		}
	}

	return nil
}

// LoadTarget allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (censuseL) LoadTarget(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCensuse interface{}, mods queries.Applicator) error {
	var slice []*Censuse
	var object *Censuse

	if singular {
		object = maybeCensuse.(*Censuse)
	} else {
		slice = *maybeCensuse.(*[]*Censuse)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &censuseR{}
		}
		args = append(args, object.TargetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &censuseR{}
			}

			for _, a := range args {
				if a == obj.TargetID {
					continue Outer
				}
			}

			args = append(args, obj.TargetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`targets`),
		qm.WhereIn(`targets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Target")
	}

	var resultSlice []*Target
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Target")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for targets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for targets")
	}

	if len(censuseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Target = foreign
		if foreign.R == nil {
			foreign.R = &targetR{}
		}
		foreign.R.Censuses = append(foreign.R.Censuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TargetID == foreign.ID {
				local.R.Target = foreign
				if foreign.R == nil {
					foreign.R = &targetR{}
				}
				foreign.R.Censuses = append(foreign.R.Censuses, local)
				break
			}
		}
	}

	return nil
}

// LoadMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (censuseL) LoadMembers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCensuse interface{}, mods queries.Applicator) error {
	var slice []*Censuse
	var object *Censuse

	if singular {
		object = maybeCensuse.(*Censuse)
	} else {
		slice = *maybeCensuse.(*[]*Censuse)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &censuseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &censuseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"members\".*, \"a\".\"census_id\""),
		qm.From("\"members\""),
		qm.InnerJoin("\"census_members\" as \"a\" on \"members\".\"id\" = \"a\".\"member_id\""),
		qm.WhereIn("\"a\".\"census_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load members")
	}

	var resultSlice []*Member

	var localJoinCols []string
	for results.Next() {
		one := new(Member)
		var localJoinCol string

		err = results.Scan(&one.UpdatedAt, &one.CreatedAt, &one.ID, &one.EntityID, &one.PublicKey, &one.StreetAddress, &one.FirstName, &one.LastName, &one.Email, &one.Phone, &one.DateOfBirth, &one.Origin, &one.Consented, &one.Verified, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for members")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice members")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for members")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Members = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &memberR{}
			}
			foreign.R.CensusCensuses = append(foreign.R.CensusCensuses, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Members = append(local.R.Members, foreign)
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.CensusCensuses = append(foreign.R.CensusCensuses, local)
				break
			}
		}
	}

	return nil
}

// SetEntity of the censuse to the related item.
// Sets o.R.Entity to related.
// Adds o to related.R.Censuses.
func (o *Censuse) SetEntity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Entity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"censuses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"entity_id"}),
		strmangle.WhereClause("\"", "\"", 2, censusePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EntityID = related.ID
	if o.R == nil {
		o.R = &censuseR{
			Entity: related,
		}
	} else {
		o.R.Entity = related
	}

	if related.R == nil {
		related.R = &entityR{
			Censuses: CensuseSlice{o},
		}
	} else {
		related.R.Censuses = append(related.R.Censuses, o)
	}

	return nil
}

// SetTarget of the censuse to the related item.
// Sets o.R.Target to related.
// Adds o to related.R.Censuses.
func (o *Censuse) SetTarget(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Target) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"censuses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"target_id"}),
		strmangle.WhereClause("\"", "\"", 2, censusePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TargetID = related.ID
	if o.R == nil {
		o.R = &censuseR{
			Target: related,
		}
	} else {
		o.R.Target = related
	}

	if related.R == nil {
		related.R = &targetR{
			Censuses: CensuseSlice{o},
		}
	} else {
		related.R.Censuses = append(related.R.Censuses, o)
	}

	return nil
}

// AddMembers adds the given related objects to the existing relationships
// of the censuse, optionally inserting them as new records.
// Appends related to o.R.Members.
// Sets related.R.CensusCensuses appropriately.
func (o *Censuse) AddMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Member) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"census_members\" (\"census_id\", \"member_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &censuseR{
			Members: related,
		}
	} else {
		o.R.Members = append(o.R.Members, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &memberR{
				CensusCensuses: CensuseSlice{o},
			}
		} else {
			rel.R.CensusCensuses = append(rel.R.CensusCensuses, o)
		}
	}
	return nil
}

// SetMembers removes all previously related items of the
// censuse replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CensusCensuses's Members accordingly.
// Replaces o.R.Members with related.
// Sets related.R.CensusCensuses's Members accordingly.
func (o *Censuse) SetMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Member) error {
	query := "delete from \"census_members\" where \"census_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMembersFromCensusCensusesSlice(o, related)
	if o.R != nil {
		o.R.Members = nil
	}
	return o.AddMembers(ctx, exec, insert, related...)
}

// RemoveMembers relationships from objects passed in.
// Removes related items from R.Members (uses pointer comparison, removal does not keep order)
// Sets related.R.CensusCensuses.
func (o *Censuse) RemoveMembers(ctx context.Context, exec boil.ContextExecutor, related ...*Member) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"census_members\" where \"census_id\" = $1 and \"member_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMembersFromCensusCensusesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Members {
			if rel != ri {
				continue
			}

			ln := len(o.R.Members)
			if ln > 1 && i < ln-1 {
				o.R.Members[i] = o.R.Members[ln-1]
			}
			o.R.Members = o.R.Members[:ln-1]
			break
		}
	}

	return nil
}

func removeMembersFromCensusCensusesSlice(o *Censuse, related []*Member) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.CensusCensuses {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.CensusCensuses)
			if ln > 1 && i < ln-1 {
				rel.R.CensusCensuses[i] = rel.R.CensusCensuses[ln-1]
			}
			rel.R.CensusCensuses = rel.R.CensusCensuses[:ln-1]
			break
		}
	}
}

// Censuses retrieves all the records using an executor.
func Censuses(mods ...qm.QueryMod) censuseQuery {
	mods = append(mods, qm.From("\"censuses\""))
	return censuseQuery{NewQuery(mods...)}
}

// FindCensuse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCensuse(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Censuse, error) {
	censuseObj := &Censuse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"censuses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, censuseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from censuses")
	}

	return censuseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Censuse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no censuses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(censuseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	censuseInsertCacheMut.RLock()
	cache, cached := censuseInsertCache[key]
	censuseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			censuseAllColumns,
			censuseColumnsWithDefault,
			censuseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(censuseType, censuseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(censuseType, censuseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"censuses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"censuses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into censuses")
	}

	if !cached {
		censuseInsertCacheMut.Lock()
		censuseInsertCache[key] = cache
		censuseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Censuse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Censuse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	censuseUpdateCacheMut.RLock()
	cache, cached := censuseUpdateCache[key]
	censuseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			censuseAllColumns,
			censusePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update censuses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"censuses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, censusePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(censuseType, censuseMapping, append(wl, censusePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update censuses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for censuses")
	}

	if !cached {
		censuseUpdateCacheMut.Lock()
		censuseUpdateCache[key] = cache
		censuseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q censuseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for censuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for censuses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CensuseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), censusePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"censuses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, censusePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in censuse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all censuse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Censuse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no censuses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(censuseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	censuseUpsertCacheMut.RLock()
	cache, cached := censuseUpsertCache[key]
	censuseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			censuseAllColumns,
			censuseColumnsWithDefault,
			censuseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			censuseAllColumns,
			censusePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert censuses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(censusePrimaryKeyColumns))
			copy(conflict, censusePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"censuses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(censuseType, censuseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(censuseType, censuseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert censuses")
	}

	if !cached {
		censuseUpsertCacheMut.Lock()
		censuseUpsertCache[key] = cache
		censuseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Censuse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Censuse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Censuse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), censusePrimaryKeyMapping)
	sql := "DELETE FROM \"censuses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from censuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for censuses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q censuseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no censuseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from censuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for censuses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CensuseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(censuseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), censusePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"censuses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, censusePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from censuse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for censuses")
	}

	if len(censuseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Censuse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCensuse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CensuseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CensuseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), censusePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"censuses\".* FROM \"censuses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, censusePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CensuseSlice")
	}

	*o = slice

	return nil
}

// CensuseExists checks if the Censuse row exists.
func CensuseExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"censuses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if censuses exists")
	}

	return exists, nil
}
